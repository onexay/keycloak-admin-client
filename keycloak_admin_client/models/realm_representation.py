# coding: utf-8

"""
    My Project

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import
import re  # noqa: F401
import sys  # noqa: F401

import six  # noqa: F401
import nulltype  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    int,
    none_type,
    str,
    validate_get_composed_info,
)
try:
    from openapi_client.models import application_representation
except ImportError:
    application_representation = sys.modules[
        'openapi_client.models.application_representation']
try:
    from openapi_client.models import authentication_flow_representation
except ImportError:
    authentication_flow_representation = sys.modules[
        'openapi_client.models.authentication_flow_representation']
try:
    from openapi_client.models import authenticator_config_representation
except ImportError:
    authenticator_config_representation = sys.modules[
        'openapi_client.models.authenticator_config_representation']
try:
    from openapi_client.models import brute_force_strategy
except ImportError:
    brute_force_strategy = sys.modules[
        'openapi_client.models.brute_force_strategy']
try:
    from openapi_client.models import client_policies_representation
except ImportError:
    client_policies_representation = sys.modules[
        'openapi_client.models.client_policies_representation']
try:
    from openapi_client.models import client_profiles_representation
except ImportError:
    client_profiles_representation = sys.modules[
        'openapi_client.models.client_profiles_representation']
try:
    from openapi_client.models import client_representation
except ImportError:
    client_representation = sys.modules[
        'openapi_client.models.client_representation']
try:
    from openapi_client.models import client_scope_representation
except ImportError:
    client_scope_representation = sys.modules[
        'openapi_client.models.client_scope_representation']
try:
    from openapi_client.models import client_template_representation
except ImportError:
    client_template_representation = sys.modules[
        'openapi_client.models.client_template_representation']
try:
    from openapi_client.models import group_representation
except ImportError:
    group_representation = sys.modules[
        'openapi_client.models.group_representation']
try:
    from openapi_client.models import identity_provider_mapper_representation
except ImportError:
    identity_provider_mapper_representation = sys.modules[
        'openapi_client.models.identity_provider_mapper_representation']
try:
    from openapi_client.models import identity_provider_representation
except ImportError:
    identity_provider_representation = sys.modules[
        'openapi_client.models.identity_provider_representation']
try:
    from openapi_client.models import multivalued_hash_map_string_component_export_representation
except ImportError:
    multivalued_hash_map_string_component_export_representation = sys.modules[
        'openapi_client.models.multivalued_hash_map_string_component_export_representation']
try:
    from openapi_client.models import o_auth_client_representation
except ImportError:
    o_auth_client_representation = sys.modules[
        'openapi_client.models.o_auth_client_representation']
try:
    from openapi_client.models import organization_representation
except ImportError:
    organization_representation = sys.modules[
        'openapi_client.models.organization_representation']
try:
    from openapi_client.models import protocol_mapper_representation
except ImportError:
    protocol_mapper_representation = sys.modules[
        'openapi_client.models.protocol_mapper_representation']
try:
    from openapi_client.models import required_action_provider_representation
except ImportError:
    required_action_provider_representation = sys.modules[
        'openapi_client.models.required_action_provider_representation']
try:
    from openapi_client.models import role_representation
except ImportError:
    role_representation = sys.modules[
        'openapi_client.models.role_representation']
try:
    from openapi_client.models import roles_representation
except ImportError:
    roles_representation = sys.modules[
        'openapi_client.models.roles_representation']
try:
    from openapi_client.models import scope_mapping_representation
except ImportError:
    scope_mapping_representation = sys.modules[
        'openapi_client.models.scope_mapping_representation']
try:
    from openapi_client.models import user_federation_mapper_representation
except ImportError:
    user_federation_mapper_representation = sys.modules[
        'openapi_client.models.user_federation_mapper_representation']
try:
    from openapi_client.models import user_federation_provider_representation
except ImportError:
    user_federation_provider_representation = sys.modules[
        'openapi_client.models.user_federation_provider_representation']
try:
    from openapi_client.models import user_representation
except ImportError:
    user_representation = sys.modules[
        'openapi_client.models.user_representation']


class RealmRepresentation(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    additional_properties_type = None

    @cached_property
    def openapi_types():
        """
        This must be a class method so a model may have properties that are
        of type self, this ensures that we don't create a cyclic import

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'id': (str,),  # noqa: E501
            'realm': (str,),  # noqa: E501
            'display_name': (str,),  # noqa: E501
            'display_name_html': (str,),  # noqa: E501
            'not_before': (int,),  # noqa: E501
            'default_signature_algorithm': (str,),  # noqa: E501
            'revoke_refresh_token': (bool,),  # noqa: E501
            'refresh_token_max_reuse': (int,),  # noqa: E501
            'access_token_lifespan': (int,),  # noqa: E501
            'access_token_lifespan_for_implicit_flow': (int,),  # noqa: E501
            'sso_session_idle_timeout': (int,),  # noqa: E501
            'sso_session_max_lifespan': (int,),  # noqa: E501
            'sso_session_idle_timeout_remember_me': (int,),  # noqa: E501
            'sso_session_max_lifespan_remember_me': (int,),  # noqa: E501
            'offline_session_idle_timeout': (int,),  # noqa: E501
            'offline_session_max_lifespan_enabled': (bool,),  # noqa: E501
            'offline_session_max_lifespan': (int,),  # noqa: E501
            'client_session_idle_timeout': (int,),  # noqa: E501
            'client_session_max_lifespan': (int,),  # noqa: E501
            'client_offline_session_idle_timeout': (int,),  # noqa: E501
            'client_offline_session_max_lifespan': (int,),  # noqa: E501
            'access_code_lifespan': (int,),  # noqa: E501
            'access_code_lifespan_user_action': (int,),  # noqa: E501
            'access_code_lifespan_login': (int,),  # noqa: E501
            'action_token_generated_by_admin_lifespan': (int,),  # noqa: E501
            'action_token_generated_by_user_lifespan': (int,),  # noqa: E501
            'oauth2_device_code_lifespan': (int,),  # noqa: E501
            'oauth2_device_polling_interval': (int,),  # noqa: E501
            'enabled': (bool,),  # noqa: E501
            'ssl_required': (str,),  # noqa: E501
            'password_credential_grant_allowed': (bool,),  # noqa: E501
            'registration_allowed': (bool,),  # noqa: E501
            'registration_email_as_username': (bool,),  # noqa: E501
            'remember_me': (bool,),  # noqa: E501
            'verify_email': (bool,),  # noqa: E501
            'login_with_email_allowed': (bool,),  # noqa: E501
            'duplicate_emails_allowed': (bool,),  # noqa: E501
            'reset_password_allowed': (bool,),  # noqa: E501
            'edit_username_allowed': (bool,),  # noqa: E501
            'user_cache_enabled': (bool,),  # noqa: E501
            'realm_cache_enabled': (bool,),  # noqa: E501
            'brute_force_protected': (bool,),  # noqa: E501
            'permanent_lockout': (bool,),  # noqa: E501
            'max_temporary_lockouts': (int,),  # noqa: E501
            'brute_force_strategy': (brute_force_strategy.BruteForceStrategy,),  # noqa: E501
            'max_failure_wait_seconds': (int,),  # noqa: E501
            'minimum_quick_login_wait_seconds': (int,),  # noqa: E501
            'wait_increment_seconds': (int,),  # noqa: E501
            'quick_login_check_milli_seconds': (int,),  # noqa: E501
            'max_delta_time_seconds': (int,),  # noqa: E501
            'failure_factor': (int,),  # noqa: E501
            'private_key': (str,),  # noqa: E501
            'public_key': (str,),  # noqa: E501
            'certificate': (str,),  # noqa: E501
            'code_secret': (str,),  # noqa: E501
            'roles': (roles_representation.RolesRepresentation,),  # noqa: E501
            'groups': ([group_representation.GroupRepresentation],),  # noqa: E501
            'default_roles': ([str],),  # noqa: E501
            'default_role': (role_representation.RoleRepresentation,),  # noqa: E501
            'default_groups': ([str],),  # noqa: E501
            'required_credentials': ([str],),  # noqa: E501
            'password_policy': (str,),  # noqa: E501
            'otp_policy_type': (str,),  # noqa: E501
            'otp_policy_algorithm': (str,),  # noqa: E501
            'otp_policy_initial_counter': (int,),  # noqa: E501
            'otp_policy_digits': (int,),  # noqa: E501
            'otp_policy_look_ahead_window': (int,),  # noqa: E501
            'otp_policy_period': (int,),  # noqa: E501
            'otp_policy_code_reusable': (bool,),  # noqa: E501
            'otp_supported_applications': ([str],),  # noqa: E501
            'localization_texts': ({str: ({str: (str,)},)},),  # noqa: E501
            'web_authn_policy_rp_entity_name': (str,),  # noqa: E501
            'web_authn_policy_signature_algorithms': ([str],),  # noqa: E501
            'web_authn_policy_rp_id': (str,),  # noqa: E501
            'web_authn_policy_attestation_conveyance_preference': (str,),  # noqa: E501
            'web_authn_policy_authenticator_attachment': (str,),  # noqa: E501
            'web_authn_policy_require_resident_key': (str,),  # noqa: E501
            'web_authn_policy_user_verification_requirement': (str,),  # noqa: E501
            'web_authn_policy_create_timeout': (int,),  # noqa: E501
            'web_authn_policy_avoid_same_authenticator_register': (bool,),  # noqa: E501
            'web_authn_policy_acceptable_aaguids': ([str],),  # noqa: E501
            'web_authn_policy_extra_origins': ([str],),  # noqa: E501
            'web_authn_policy_passwordless_rp_entity_name': (str,),  # noqa: E501
            'web_authn_policy_passwordless_signature_algorithms': ([str],),  # noqa: E501
            'web_authn_policy_passwordless_rp_id': (str,),  # noqa: E501
            'web_authn_policy_passwordless_attestation_conveyance_preference': (str,),  # noqa: E501
            'web_authn_policy_passwordless_authenticator_attachment': (str,),  # noqa: E501
            'web_authn_policy_passwordless_require_resident_key': (str,),  # noqa: E501
            'web_authn_policy_passwordless_user_verification_requirement': (str,),  # noqa: E501
            'web_authn_policy_passwordless_create_timeout': (int,),  # noqa: E501
            'web_authn_policy_passwordless_avoid_same_authenticator_register': (bool,),  # noqa: E501
            'web_authn_policy_passwordless_acceptable_aaguids': ([str],),  # noqa: E501
            'web_authn_policy_passwordless_extra_origins': ([str],),  # noqa: E501
            'client_profiles': (client_profiles_representation.ClientProfilesRepresentation,),  # noqa: E501
            'client_policies': (client_policies_representation.ClientPoliciesRepresentation,),  # noqa: E501
            'users': ([user_representation.UserRepresentation],),  # noqa: E501
            'federated_users': ([user_representation.UserRepresentation],),  # noqa: E501
            'scope_mappings': ([scope_mapping_representation.ScopeMappingRepresentation],),  # noqa: E501
            'client_scope_mappings': ({str: ([scope_mapping_representation.ScopeMappingRepresentation],)},),  # noqa: E501
            'clients': ([client_representation.ClientRepresentation],),  # noqa: E501
            'client_scopes': ([client_scope_representation.ClientScopeRepresentation],),  # noqa: E501
            'default_default_client_scopes': ([str],),  # noqa: E501
            'default_optional_client_scopes': ([str],),  # noqa: E501
            'browser_security_headers': ({str: (str,)},),  # noqa: E501
            'smtp_server': ({str: (str,)},),  # noqa: E501
            'user_federation_providers': ([user_federation_provider_representation.UserFederationProviderRepresentation],),  # noqa: E501
            'user_federation_mappers': ([user_federation_mapper_representation.UserFederationMapperRepresentation],),  # noqa: E501
            'login_theme': (str,),  # noqa: E501
            'account_theme': (str,),  # noqa: E501
            'admin_theme': (str,),  # noqa: E501
            'email_theme': (str,),  # noqa: E501
            'events_enabled': (bool,),  # noqa: E501
            'events_expiration': (int,),  # noqa: E501
            'events_listeners': ([str],),  # noqa: E501
            'enabled_event_types': ([str],),  # noqa: E501
            'admin_events_enabled': (bool,),  # noqa: E501
            'admin_events_details_enabled': (bool,),  # noqa: E501
            'identity_providers': ([identity_provider_representation.IdentityProviderRepresentation],),  # noqa: E501
            'identity_provider_mappers': ([identity_provider_mapper_representation.IdentityProviderMapperRepresentation],),  # noqa: E501
            'protocol_mappers': ([protocol_mapper_representation.ProtocolMapperRepresentation],),  # noqa: E501
            'components': (multivalued_hash_map_string_component_export_representation.MultivaluedHashMapStringComponentExportRepresentation,),  # noqa: E501
            'internationalization_enabled': (bool,),  # noqa: E501
            'supported_locales': ([str],),  # noqa: E501
            'default_locale': (str,),  # noqa: E501
            'authentication_flows': ([authentication_flow_representation.AuthenticationFlowRepresentation],),  # noqa: E501
            'authenticator_config': ([authenticator_config_representation.AuthenticatorConfigRepresentation],),  # noqa: E501
            'required_actions': ([required_action_provider_representation.RequiredActionProviderRepresentation],),  # noqa: E501
            'browser_flow': (str,),  # noqa: E501
            'registration_flow': (str,),  # noqa: E501
            'direct_grant_flow': (str,),  # noqa: E501
            'reset_credentials_flow': (str,),  # noqa: E501
            'client_authentication_flow': (str,),  # noqa: E501
            'docker_authentication_flow': (str,),  # noqa: E501
            'first_broker_login_flow': (str,),  # noqa: E501
            'attributes': ({str: (str,)},),  # noqa: E501
            'keycloak_version': (str,),  # noqa: E501
            'user_managed_access_allowed': (bool,),  # noqa: E501
            'organizations_enabled': (bool,),  # noqa: E501
            'organizations': ([organization_representation.OrganizationRepresentation],),  # noqa: E501
            'social': (bool,),  # noqa: E501
            'update_profile_on_initial_social_login': (bool,),  # noqa: E501
            'social_providers': ({str: (str,)},),  # noqa: E501
            'application_scope_mappings': ({str: ([scope_mapping_representation.ScopeMappingRepresentation],)},),  # noqa: E501
            'applications': ([application_representation.ApplicationRepresentation],),  # noqa: E501
            'oauth_clients': ([o_auth_client_representation.OAuthClientRepresentation],),  # noqa: E501
            'client_templates': ([client_template_representation.ClientTemplateRepresentation],),  # noqa: E501
            'o_auth2_device_code_lifespan': (int,),  # noqa: E501
            'o_auth2_device_polling_interval': (int,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None

    attribute_map = {
        'id': 'id',  # noqa: E501
        'realm': 'realm',  # noqa: E501
        'display_name': 'displayName',  # noqa: E501
        'display_name_html': 'displayNameHtml',  # noqa: E501
        'not_before': 'notBefore',  # noqa: E501
        'default_signature_algorithm': 'defaultSignatureAlgorithm',  # noqa: E501
        'revoke_refresh_token': 'revokeRefreshToken',  # noqa: E501
        'refresh_token_max_reuse': 'refreshTokenMaxReuse',  # noqa: E501
        'access_token_lifespan': 'accessTokenLifespan',  # noqa: E501
        'access_token_lifespan_for_implicit_flow': 'accessTokenLifespanForImplicitFlow',  # noqa: E501
        'sso_session_idle_timeout': 'ssoSessionIdleTimeout',  # noqa: E501
        'sso_session_max_lifespan': 'ssoSessionMaxLifespan',  # noqa: E501
        'sso_session_idle_timeout_remember_me': 'ssoSessionIdleTimeoutRememberMe',  # noqa: E501
        'sso_session_max_lifespan_remember_me': 'ssoSessionMaxLifespanRememberMe',  # noqa: E501
        'offline_session_idle_timeout': 'offlineSessionIdleTimeout',  # noqa: E501
        'offline_session_max_lifespan_enabled': 'offlineSessionMaxLifespanEnabled',  # noqa: E501
        'offline_session_max_lifespan': 'offlineSessionMaxLifespan',  # noqa: E501
        'client_session_idle_timeout': 'clientSessionIdleTimeout',  # noqa: E501
        'client_session_max_lifespan': 'clientSessionMaxLifespan',  # noqa: E501
        'client_offline_session_idle_timeout': 'clientOfflineSessionIdleTimeout',  # noqa: E501
        'client_offline_session_max_lifespan': 'clientOfflineSessionMaxLifespan',  # noqa: E501
        'access_code_lifespan': 'accessCodeLifespan',  # noqa: E501
        'access_code_lifespan_user_action': 'accessCodeLifespanUserAction',  # noqa: E501
        'access_code_lifespan_login': 'accessCodeLifespanLogin',  # noqa: E501
        'action_token_generated_by_admin_lifespan': 'actionTokenGeneratedByAdminLifespan',  # noqa: E501
        'action_token_generated_by_user_lifespan': 'actionTokenGeneratedByUserLifespan',  # noqa: E501
        'oauth2_device_code_lifespan': 'oauth2DeviceCodeLifespan',  # noqa: E501
        'oauth2_device_polling_interval': 'oauth2DevicePollingInterval',  # noqa: E501
        'enabled': 'enabled',  # noqa: E501
        'ssl_required': 'sslRequired',  # noqa: E501
        'password_credential_grant_allowed': 'passwordCredentialGrantAllowed',  # noqa: E501
        'registration_allowed': 'registrationAllowed',  # noqa: E501
        'registration_email_as_username': 'registrationEmailAsUsername',  # noqa: E501
        'remember_me': 'rememberMe',  # noqa: E501
        'verify_email': 'verifyEmail',  # noqa: E501
        'login_with_email_allowed': 'loginWithEmailAllowed',  # noqa: E501
        'duplicate_emails_allowed': 'duplicateEmailsAllowed',  # noqa: E501
        'reset_password_allowed': 'resetPasswordAllowed',  # noqa: E501
        'edit_username_allowed': 'editUsernameAllowed',  # noqa: E501
        'user_cache_enabled': 'userCacheEnabled',  # noqa: E501
        'realm_cache_enabled': 'realmCacheEnabled',  # noqa: E501
        'brute_force_protected': 'bruteForceProtected',  # noqa: E501
        'permanent_lockout': 'permanentLockout',  # noqa: E501
        'max_temporary_lockouts': 'maxTemporaryLockouts',  # noqa: E501
        'brute_force_strategy': 'bruteForceStrategy',  # noqa: E501
        'max_failure_wait_seconds': 'maxFailureWaitSeconds',  # noqa: E501
        'minimum_quick_login_wait_seconds': 'minimumQuickLoginWaitSeconds',  # noqa: E501
        'wait_increment_seconds': 'waitIncrementSeconds',  # noqa: E501
        'quick_login_check_milli_seconds': 'quickLoginCheckMilliSeconds',  # noqa: E501
        'max_delta_time_seconds': 'maxDeltaTimeSeconds',  # noqa: E501
        'failure_factor': 'failureFactor',  # noqa: E501
        'private_key': 'privateKey',  # noqa: E501
        'public_key': 'publicKey',  # noqa: E501
        'certificate': 'certificate',  # noqa: E501
        'code_secret': 'codeSecret',  # noqa: E501
        'roles': 'roles',  # noqa: E501
        'groups': 'groups',  # noqa: E501
        'default_roles': 'defaultRoles',  # noqa: E501
        'default_role': 'defaultRole',  # noqa: E501
        'default_groups': 'defaultGroups',  # noqa: E501
        'required_credentials': 'requiredCredentials',  # noqa: E501
        'password_policy': 'passwordPolicy',  # noqa: E501
        'otp_policy_type': 'otpPolicyType',  # noqa: E501
        'otp_policy_algorithm': 'otpPolicyAlgorithm',  # noqa: E501
        'otp_policy_initial_counter': 'otpPolicyInitialCounter',  # noqa: E501
        'otp_policy_digits': 'otpPolicyDigits',  # noqa: E501
        'otp_policy_look_ahead_window': 'otpPolicyLookAheadWindow',  # noqa: E501
        'otp_policy_period': 'otpPolicyPeriod',  # noqa: E501
        'otp_policy_code_reusable': 'otpPolicyCodeReusable',  # noqa: E501
        'otp_supported_applications': 'otpSupportedApplications',  # noqa: E501
        'localization_texts': 'localizationTexts',  # noqa: E501
        'web_authn_policy_rp_entity_name': 'webAuthnPolicyRpEntityName',  # noqa: E501
        'web_authn_policy_signature_algorithms': 'webAuthnPolicySignatureAlgorithms',  # noqa: E501
        'web_authn_policy_rp_id': 'webAuthnPolicyRpId',  # noqa: E501
        'web_authn_policy_attestation_conveyance_preference': 'webAuthnPolicyAttestationConveyancePreference',  # noqa: E501
        'web_authn_policy_authenticator_attachment': 'webAuthnPolicyAuthenticatorAttachment',  # noqa: E501
        'web_authn_policy_require_resident_key': 'webAuthnPolicyRequireResidentKey',  # noqa: E501
        'web_authn_policy_user_verification_requirement': 'webAuthnPolicyUserVerificationRequirement',  # noqa: E501
        'web_authn_policy_create_timeout': 'webAuthnPolicyCreateTimeout',  # noqa: E501
        'web_authn_policy_avoid_same_authenticator_register': 'webAuthnPolicyAvoidSameAuthenticatorRegister',  # noqa: E501
        'web_authn_policy_acceptable_aaguids': 'webAuthnPolicyAcceptableAaguids',  # noqa: E501
        'web_authn_policy_extra_origins': 'webAuthnPolicyExtraOrigins',  # noqa: E501
        'web_authn_policy_passwordless_rp_entity_name': 'webAuthnPolicyPasswordlessRpEntityName',  # noqa: E501
        'web_authn_policy_passwordless_signature_algorithms': 'webAuthnPolicyPasswordlessSignatureAlgorithms',  # noqa: E501
        'web_authn_policy_passwordless_rp_id': 'webAuthnPolicyPasswordlessRpId',  # noqa: E501
        'web_authn_policy_passwordless_attestation_conveyance_preference': 'webAuthnPolicyPasswordlessAttestationConveyancePreference',  # noqa: E501
        'web_authn_policy_passwordless_authenticator_attachment': 'webAuthnPolicyPasswordlessAuthenticatorAttachment',  # noqa: E501
        'web_authn_policy_passwordless_require_resident_key': 'webAuthnPolicyPasswordlessRequireResidentKey',  # noqa: E501
        'web_authn_policy_passwordless_user_verification_requirement': 'webAuthnPolicyPasswordlessUserVerificationRequirement',  # noqa: E501
        'web_authn_policy_passwordless_create_timeout': 'webAuthnPolicyPasswordlessCreateTimeout',  # noqa: E501
        'web_authn_policy_passwordless_avoid_same_authenticator_register': 'webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister',  # noqa: E501
        'web_authn_policy_passwordless_acceptable_aaguids': 'webAuthnPolicyPasswordlessAcceptableAaguids',  # noqa: E501
        'web_authn_policy_passwordless_extra_origins': 'webAuthnPolicyPasswordlessExtraOrigins',  # noqa: E501
        'client_profiles': 'clientProfiles',  # noqa: E501
        'client_policies': 'clientPolicies',  # noqa: E501
        'users': 'users',  # noqa: E501
        'federated_users': 'federatedUsers',  # noqa: E501
        'scope_mappings': 'scopeMappings',  # noqa: E501
        'client_scope_mappings': 'clientScopeMappings',  # noqa: E501
        'clients': 'clients',  # noqa: E501
        'client_scopes': 'clientScopes',  # noqa: E501
        'default_default_client_scopes': 'defaultDefaultClientScopes',  # noqa: E501
        'default_optional_client_scopes': 'defaultOptionalClientScopes',  # noqa: E501
        'browser_security_headers': 'browserSecurityHeaders',  # noqa: E501
        'smtp_server': 'smtpServer',  # noqa: E501
        'user_federation_providers': 'userFederationProviders',  # noqa: E501
        'user_federation_mappers': 'userFederationMappers',  # noqa: E501
        'login_theme': 'loginTheme',  # noqa: E501
        'account_theme': 'accountTheme',  # noqa: E501
        'admin_theme': 'adminTheme',  # noqa: E501
        'email_theme': 'emailTheme',  # noqa: E501
        'events_enabled': 'eventsEnabled',  # noqa: E501
        'events_expiration': 'eventsExpiration',  # noqa: E501
        'events_listeners': 'eventsListeners',  # noqa: E501
        'enabled_event_types': 'enabledEventTypes',  # noqa: E501
        'admin_events_enabled': 'adminEventsEnabled',  # noqa: E501
        'admin_events_details_enabled': 'adminEventsDetailsEnabled',  # noqa: E501
        'identity_providers': 'identityProviders',  # noqa: E501
        'identity_provider_mappers': 'identityProviderMappers',  # noqa: E501
        'protocol_mappers': 'protocolMappers',  # noqa: E501
        'components': 'components',  # noqa: E501
        'internationalization_enabled': 'internationalizationEnabled',  # noqa: E501
        'supported_locales': 'supportedLocales',  # noqa: E501
        'default_locale': 'defaultLocale',  # noqa: E501
        'authentication_flows': 'authenticationFlows',  # noqa: E501
        'authenticator_config': 'authenticatorConfig',  # noqa: E501
        'required_actions': 'requiredActions',  # noqa: E501
        'browser_flow': 'browserFlow',  # noqa: E501
        'registration_flow': 'registrationFlow',  # noqa: E501
        'direct_grant_flow': 'directGrantFlow',  # noqa: E501
        'reset_credentials_flow': 'resetCredentialsFlow',  # noqa: E501
        'client_authentication_flow': 'clientAuthenticationFlow',  # noqa: E501
        'docker_authentication_flow': 'dockerAuthenticationFlow',  # noqa: E501
        'first_broker_login_flow': 'firstBrokerLoginFlow',  # noqa: E501
        'attributes': 'attributes',  # noqa: E501
        'keycloak_version': 'keycloakVersion',  # noqa: E501
        'user_managed_access_allowed': 'userManagedAccessAllowed',  # noqa: E501
        'organizations_enabled': 'organizationsEnabled',  # noqa: E501
        'organizations': 'organizations',  # noqa: E501
        'social': 'social',  # noqa: E501
        'update_profile_on_initial_social_login': 'updateProfileOnInitialSocialLogin',  # noqa: E501
        'social_providers': 'socialProviders',  # noqa: E501
        'application_scope_mappings': 'applicationScopeMappings',  # noqa: E501
        'applications': 'applications',  # noqa: E501
        'oauth_clients': 'oauthClients',  # noqa: E501
        'client_templates': 'clientTemplates',  # noqa: E501
        'o_auth2_device_code_lifespan': 'oAuth2DeviceCodeLifespan',  # noqa: E501
        'o_auth2_device_polling_interval': 'oAuth2DevicePollingInterval',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_from_server',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, _check_type=True, _from_server=False, _path_to_item=(), _configuration=None, _visited_composed_classes=(), **kwargs):  # noqa: E501
        """realm_representation.RealmRepresentation - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _from_server (bool): True if the data is from the server
                                False if the data is from the client (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): [optional]  # noqa: E501
            realm (str): [optional]  # noqa: E501
            display_name (str): [optional]  # noqa: E501
            display_name_html (str): [optional]  # noqa: E501
            not_before (int): [optional]  # noqa: E501
            default_signature_algorithm (str): [optional]  # noqa: E501
            revoke_refresh_token (bool): [optional]  # noqa: E501
            refresh_token_max_reuse (int): [optional]  # noqa: E501
            access_token_lifespan (int): [optional]  # noqa: E501
            access_token_lifespan_for_implicit_flow (int): [optional]  # noqa: E501
            sso_session_idle_timeout (int): [optional]  # noqa: E501
            sso_session_max_lifespan (int): [optional]  # noqa: E501
            sso_session_idle_timeout_remember_me (int): [optional]  # noqa: E501
            sso_session_max_lifespan_remember_me (int): [optional]  # noqa: E501
            offline_session_idle_timeout (int): [optional]  # noqa: E501
            offline_session_max_lifespan_enabled (bool): [optional]  # noqa: E501
            offline_session_max_lifespan (int): [optional]  # noqa: E501
            client_session_idle_timeout (int): [optional]  # noqa: E501
            client_session_max_lifespan (int): [optional]  # noqa: E501
            client_offline_session_idle_timeout (int): [optional]  # noqa: E501
            client_offline_session_max_lifespan (int): [optional]  # noqa: E501
            access_code_lifespan (int): [optional]  # noqa: E501
            access_code_lifespan_user_action (int): [optional]  # noqa: E501
            access_code_lifespan_login (int): [optional]  # noqa: E501
            action_token_generated_by_admin_lifespan (int): [optional]  # noqa: E501
            action_token_generated_by_user_lifespan (int): [optional]  # noqa: E501
            oauth2_device_code_lifespan (int): [optional]  # noqa: E501
            oauth2_device_polling_interval (int): [optional]  # noqa: E501
            enabled (bool): [optional]  # noqa: E501
            ssl_required (str): [optional]  # noqa: E501
            password_credential_grant_allowed (bool): [optional]  # noqa: E501
            registration_allowed (bool): [optional]  # noqa: E501
            registration_email_as_username (bool): [optional]  # noqa: E501
            remember_me (bool): [optional]  # noqa: E501
            verify_email (bool): [optional]  # noqa: E501
            login_with_email_allowed (bool): [optional]  # noqa: E501
            duplicate_emails_allowed (bool): [optional]  # noqa: E501
            reset_password_allowed (bool): [optional]  # noqa: E501
            edit_username_allowed (bool): [optional]  # noqa: E501
            user_cache_enabled (bool): [optional]  # noqa: E501
            realm_cache_enabled (bool): [optional]  # noqa: E501
            brute_force_protected (bool): [optional]  # noqa: E501
            permanent_lockout (bool): [optional]  # noqa: E501
            max_temporary_lockouts (int): [optional]  # noqa: E501
            brute_force_strategy (brute_force_strategy.BruteForceStrategy): [optional]  # noqa: E501
            max_failure_wait_seconds (int): [optional]  # noqa: E501
            minimum_quick_login_wait_seconds (int): [optional]  # noqa: E501
            wait_increment_seconds (int): [optional]  # noqa: E501
            quick_login_check_milli_seconds (int): [optional]  # noqa: E501
            max_delta_time_seconds (int): [optional]  # noqa: E501
            failure_factor (int): [optional]  # noqa: E501
            private_key (str): [optional]  # noqa: E501
            public_key (str): [optional]  # noqa: E501
            certificate (str): [optional]  # noqa: E501
            code_secret (str): [optional]  # noqa: E501
            roles (roles_representation.RolesRepresentation): [optional]  # noqa: E501
            groups ([group_representation.GroupRepresentation]): [optional]  # noqa: E501
            default_roles ([str]): [optional]  # noqa: E501
            default_role (role_representation.RoleRepresentation): [optional]  # noqa: E501
            default_groups ([str]): [optional]  # noqa: E501
            required_credentials ([str]): [optional]  # noqa: E501
            password_policy (str): [optional]  # noqa: E501
            otp_policy_type (str): [optional]  # noqa: E501
            otp_policy_algorithm (str): [optional]  # noqa: E501
            otp_policy_initial_counter (int): [optional]  # noqa: E501
            otp_policy_digits (int): [optional]  # noqa: E501
            otp_policy_look_ahead_window (int): [optional]  # noqa: E501
            otp_policy_period (int): [optional]  # noqa: E501
            otp_policy_code_reusable (bool): [optional]  # noqa: E501
            otp_supported_applications ([str]): [optional]  # noqa: E501
            localization_texts ({str: ({str: (str,)},)}): [optional]  # noqa: E501
            web_authn_policy_rp_entity_name (str): [optional]  # noqa: E501
            web_authn_policy_signature_algorithms ([str]): [optional]  # noqa: E501
            web_authn_policy_rp_id (str): [optional]  # noqa: E501
            web_authn_policy_attestation_conveyance_preference (str): [optional]  # noqa: E501
            web_authn_policy_authenticator_attachment (str): [optional]  # noqa: E501
            web_authn_policy_require_resident_key (str): [optional]  # noqa: E501
            web_authn_policy_user_verification_requirement (str): [optional]  # noqa: E501
            web_authn_policy_create_timeout (int): [optional]  # noqa: E501
            web_authn_policy_avoid_same_authenticator_register (bool): [optional]  # noqa: E501
            web_authn_policy_acceptable_aaguids ([str]): [optional]  # noqa: E501
            web_authn_policy_extra_origins ([str]): [optional]  # noqa: E501
            web_authn_policy_passwordless_rp_entity_name (str): [optional]  # noqa: E501
            web_authn_policy_passwordless_signature_algorithms ([str]): [optional]  # noqa: E501
            web_authn_policy_passwordless_rp_id (str): [optional]  # noqa: E501
            web_authn_policy_passwordless_attestation_conveyance_preference (str): [optional]  # noqa: E501
            web_authn_policy_passwordless_authenticator_attachment (str): [optional]  # noqa: E501
            web_authn_policy_passwordless_require_resident_key (str): [optional]  # noqa: E501
            web_authn_policy_passwordless_user_verification_requirement (str): [optional]  # noqa: E501
            web_authn_policy_passwordless_create_timeout (int): [optional]  # noqa: E501
            web_authn_policy_passwordless_avoid_same_authenticator_register (bool): [optional]  # noqa: E501
            web_authn_policy_passwordless_acceptable_aaguids ([str]): [optional]  # noqa: E501
            web_authn_policy_passwordless_extra_origins ([str]): [optional]  # noqa: E501
            client_profiles (client_profiles_representation.ClientProfilesRepresentation): [optional]  # noqa: E501
            client_policies (client_policies_representation.ClientPoliciesRepresentation): [optional]  # noqa: E501
            users ([user_representation.UserRepresentation]): [optional]  # noqa: E501
            federated_users ([user_representation.UserRepresentation]): [optional]  # noqa: E501
            scope_mappings ([scope_mapping_representation.ScopeMappingRepresentation]): [optional]  # noqa: E501
            client_scope_mappings ({str: ([scope_mapping_representation.ScopeMappingRepresentation],)}): [optional]  # noqa: E501
            clients ([client_representation.ClientRepresentation]): [optional]  # noqa: E501
            client_scopes ([client_scope_representation.ClientScopeRepresentation]): [optional]  # noqa: E501
            default_default_client_scopes ([str]): [optional]  # noqa: E501
            default_optional_client_scopes ([str]): [optional]  # noqa: E501
            browser_security_headers ({str: (str,)}): [optional]  # noqa: E501
            smtp_server ({str: (str,)}): [optional]  # noqa: E501
            user_federation_providers ([user_federation_provider_representation.UserFederationProviderRepresentation]): [optional]  # noqa: E501
            user_federation_mappers ([user_federation_mapper_representation.UserFederationMapperRepresentation]): [optional]  # noqa: E501
            login_theme (str): [optional]  # noqa: E501
            account_theme (str): [optional]  # noqa: E501
            admin_theme (str): [optional]  # noqa: E501
            email_theme (str): [optional]  # noqa: E501
            events_enabled (bool): [optional]  # noqa: E501
            events_expiration (int): [optional]  # noqa: E501
            events_listeners ([str]): [optional]  # noqa: E501
            enabled_event_types ([str]): [optional]  # noqa: E501
            admin_events_enabled (bool): [optional]  # noqa: E501
            admin_events_details_enabled (bool): [optional]  # noqa: E501
            identity_providers ([identity_provider_representation.IdentityProviderRepresentation]): [optional]  # noqa: E501
            identity_provider_mappers ([identity_provider_mapper_representation.IdentityProviderMapperRepresentation]): [optional]  # noqa: E501
            protocol_mappers ([protocol_mapper_representation.ProtocolMapperRepresentation]): [optional]  # noqa: E501
            components (multivalued_hash_map_string_component_export_representation.MultivaluedHashMapStringComponentExportRepresentation): [optional]  # noqa: E501
            internationalization_enabled (bool): [optional]  # noqa: E501
            supported_locales ([str]): [optional]  # noqa: E501
            default_locale (str): [optional]  # noqa: E501
            authentication_flows ([authentication_flow_representation.AuthenticationFlowRepresentation]): [optional]  # noqa: E501
            authenticator_config ([authenticator_config_representation.AuthenticatorConfigRepresentation]): [optional]  # noqa: E501
            required_actions ([required_action_provider_representation.RequiredActionProviderRepresentation]): [optional]  # noqa: E501
            browser_flow (str): [optional]  # noqa: E501
            registration_flow (str): [optional]  # noqa: E501
            direct_grant_flow (str): [optional]  # noqa: E501
            reset_credentials_flow (str): [optional]  # noqa: E501
            client_authentication_flow (str): [optional]  # noqa: E501
            docker_authentication_flow (str): [optional]  # noqa: E501
            first_broker_login_flow (str): [optional]  # noqa: E501
            attributes ({str: (str,)}): [optional]  # noqa: E501
            keycloak_version (str): [optional]  # noqa: E501
            user_managed_access_allowed (bool): [optional]  # noqa: E501
            organizations_enabled (bool): [optional]  # noqa: E501
            organizations ([organization_representation.OrganizationRepresentation]): [optional]  # noqa: E501
            social (bool): [optional]  # noqa: E501
            update_profile_on_initial_social_login (bool): [optional]  # noqa: E501
            social_providers ({str: (str,)}): [optional]  # noqa: E501
            application_scope_mappings ({str: ([scope_mapping_representation.ScopeMappingRepresentation],)}): [optional]  # noqa: E501
            applications ([application_representation.ApplicationRepresentation]): [optional]  # noqa: E501
            oauth_clients ([o_auth_client_representation.OAuthClientRepresentation]): [optional]  # noqa: E501
            client_templates ([client_template_representation.ClientTemplateRepresentation]): [optional]  # noqa: E501
            o_auth2_device_code_lifespan (int): [optional]  # noqa: E501
            o_auth2_device_polling_interval (int): [optional]  # noqa: E501
        """

        self._data_store = {}
        self._check_type = _check_type
        self._from_server = _from_server
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in six.iteritems(kwargs):
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
