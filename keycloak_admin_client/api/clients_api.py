# coding: utf-8

"""
    My Project

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401
import sys  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (
    ApiTypeError,
    ApiValueError
)
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    int,
    none_type,
    str,
    validate_and_convert_types
)
from openapi_client.models import credential_representation
from openapi_client.models import client_scope_representation
from openapi_client.models import access_token
from openapi_client.models import id_token
from openapi_client.models import protocol_mapper_evaluation_representation
from openapi_client.models import role_representation
from openapi_client.models import client_representation
from openapi_client.models import management_permission_reference
from openapi_client.models import user_session_representation
from openapi_client.models import global_request_result
from openapi_client.models import user_representation


class ClientsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __admin_realms_realm_clients_client_uuid_client_secret_get(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Get the client secret  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_client_secret_get(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                credential_representation.CredentialRepresentation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_client_secret_get = Endpoint(
            settings={
                'response_type': (credential_representation.CredentialRepresentation,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/client-secret',
                'operation_id': 'admin_realms_realm_clients_client_uuid_client_secret_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_client_secret_get
        )

        def __admin_realms_realm_clients_client_uuid_client_secret_post(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Generate a new secret for the client  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_client_secret_post(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                credential_representation.CredentialRepresentation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_client_secret_post = Endpoint(
            settings={
                'response_type': (credential_representation.CredentialRepresentation,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/client-secret',
                'operation_id': 'admin_realms_realm_clients_client_uuid_client_secret_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_client_secret_post
        )

        def __admin_realms_realm_clients_client_uuid_client_secret_rotated_delete(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Invalidate the rotated secret for the client  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_client_secret_rotated_delete(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_client_secret_rotated_delete = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/client-secret/rotated',
                'operation_id': 'admin_realms_realm_clients_client_uuid_client_secret_rotated_delete',
                'http_method': 'DELETE',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_client_secret_rotated_delete
        )

        def __admin_realms_realm_clients_client_uuid_client_secret_rotated_get(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Get the rotated client secret  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_client_secret_rotated_get(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                credential_representation.CredentialRepresentation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_client_secret_rotated_get = Endpoint(
            settings={
                'response_type': (credential_representation.CredentialRepresentation,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/client-secret/rotated',
                'operation_id': 'admin_realms_realm_clients_client_uuid_client_secret_rotated_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_client_secret_rotated_get
        )

        def __admin_realms_realm_clients_client_uuid_default_client_scopes_client_scope_id_delete(
            self,
            client_scope_id,
            realm,
            client_uuid,
            **kwargs
        ):
            """/admin/realms/{realm}/clients/{client-uuid}/default-client-scopes/{clientScopeId}  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_default_client_scopes_client_scope_id_delete(client_scope_id, realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                client_scope_id (str):
                realm (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['client_scope_id'] = \
                client_scope_id
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_default_client_scopes_client_scope_id_delete = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/default-client-scopes/{clientScopeId}',
                'operation_id': 'admin_realms_realm_clients_client_uuid_default_client_scopes_client_scope_id_delete',
                'http_method': 'DELETE',
                'servers': [],
            },
            params_map={
                'all': [
                    'client_scope_id',
                    'realm',
                    'client_uuid',
                ],
                'required': [
                    'client_scope_id',
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_scope_id':
                        (str,),
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'client_scope_id': 'clientScopeId',
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'client_scope_id': 'path',
                    'realm': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_default_client_scopes_client_scope_id_delete
        )

        def __admin_realms_realm_clients_client_uuid_default_client_scopes_client_scope_id_put(
            self,
            client_scope_id,
            realm,
            client_uuid,
            **kwargs
        ):
            """/admin/realms/{realm}/clients/{client-uuid}/default-client-scopes/{clientScopeId}  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_default_client_scopes_client_scope_id_put(client_scope_id, realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                client_scope_id (str):
                realm (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['client_scope_id'] = \
                client_scope_id
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_default_client_scopes_client_scope_id_put = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/default-client-scopes/{clientScopeId}',
                'operation_id': 'admin_realms_realm_clients_client_uuid_default_client_scopes_client_scope_id_put',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'client_scope_id',
                    'realm',
                    'client_uuid',
                ],
                'required': [
                    'client_scope_id',
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_scope_id':
                        (str,),
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'client_scope_id': 'clientScopeId',
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'client_scope_id': 'path',
                    'realm': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_default_client_scopes_client_scope_id_put
        )

        def __admin_realms_realm_clients_client_uuid_default_client_scopes_get(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Get default client scopes.  Only name and ids are returned.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_default_client_scopes_get(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [client_scope_representation.ClientScopeRepresentation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_default_client_scopes_get = Endpoint(
            settings={
                'response_type': ([client_scope_representation.ClientScopeRepresentation],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/default-client-scopes',
                'operation_id': 'admin_realms_realm_clients_client_uuid_default_client_scopes_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_default_client_scopes_get
        )

        def __admin_realms_realm_clients_client_uuid_delete(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Delete the client  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_delete(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_delete = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}',
                'operation_id': 'admin_realms_realm_clients_client_uuid_delete',
                'http_method': 'DELETE',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_delete
        )

        def __admin_realms_realm_clients_client_uuid_evaluate_scopes_generate_example_access_token_get(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Create JSON with payload of example access token  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_evaluate_scopes_generate_example_access_token_get(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                scope (str): [optional]
                user_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                access_token.AccessToken
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_evaluate_scopes_generate_example_access_token_get = Endpoint(
            settings={
                'response_type': (access_token.AccessToken,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/generate-example-access-token',
                'operation_id': 'admin_realms_realm_clients_client_uuid_evaluate_scopes_generate_example_access_token_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                    'scope',
                    'user_id',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                    'scope':
                        (str,),
                    'user_id':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                    'scope': 'scope',
                    'user_id': 'userId',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                    'scope': 'query',
                    'user_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_evaluate_scopes_generate_example_access_token_get
        )

        def __admin_realms_realm_clients_client_uuid_evaluate_scopes_generate_example_id_token_get(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Create JSON with payload of example id token  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_evaluate_scopes_generate_example_id_token_get(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                scope (str): [optional]
                user_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                id_token.IdToken
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_evaluate_scopes_generate_example_id_token_get = Endpoint(
            settings={
                'response_type': (id_token.IdToken,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/generate-example-id-token',
                'operation_id': 'admin_realms_realm_clients_client_uuid_evaluate_scopes_generate_example_id_token_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                    'scope',
                    'user_id',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                    'scope':
                        (str,),
                    'user_id':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                    'scope': 'scope',
                    'user_id': 'userId',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                    'scope': 'query',
                    'user_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_evaluate_scopes_generate_example_id_token_get
        )

        def __admin_realms_realm_clients_client_uuid_evaluate_scopes_generate_example_userinfo_get(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Create JSON with payload of example user info  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_evaluate_scopes_generate_example_userinfo_get(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                scope (str): [optional]
                user_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (str,)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_evaluate_scopes_generate_example_userinfo_get = Endpoint(
            settings={
                'response_type': ({str: (str,)},),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/generate-example-userinfo',
                'operation_id': 'admin_realms_realm_clients_client_uuid_evaluate_scopes_generate_example_userinfo_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                    'scope',
                    'user_id',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                    'scope':
                        (str,),
                    'user_id':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                    'scope': 'scope',
                    'user_id': 'userId',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                    'scope': 'query',
                    'user_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_evaluate_scopes_generate_example_userinfo_get
        )

        def __admin_realms_realm_clients_client_uuid_evaluate_scopes_protocol_mappers_get(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Return list of all protocol mappers, which will be used when generating tokens issued for particular client.  # noqa: E501

            This means protocol mappers assigned to this client directly and protocol mappers assigned to all client scopes of this client.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_evaluate_scopes_protocol_mappers_get(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                scope (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [protocol_mapper_evaluation_representation.ProtocolMapperEvaluationRepresentation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_evaluate_scopes_protocol_mappers_get = Endpoint(
            settings={
                'response_type': ([protocol_mapper_evaluation_representation.ProtocolMapperEvaluationRepresentation],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/protocol-mappers',
                'operation_id': 'admin_realms_realm_clients_client_uuid_evaluate_scopes_protocol_mappers_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                    'scope',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                    'scope':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                    'scope': 'scope',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                    'scope': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_evaluate_scopes_protocol_mappers_get
        )

        def __admin_realms_realm_clients_client_uuid_evaluate_scopes_scope_mappings_role_container_id_granted_get(
            self,
            realm,
            client_uuid,
            role_container_id,
            **kwargs
        ):
            """Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.  # noqa: E501

            This contains scope mappings, which this client has directly, as well as scope mappings, which are granted to all client scopes, which are linked with this client.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_evaluate_scopes_scope_mappings_role_container_id_granted_get(realm, client_uuid, role_container_id, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):
                role_container_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [role_representation.RoleRepresentation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['role_container_id'] = \
                role_container_id
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_evaluate_scopes_scope_mappings_role_container_id_granted_get = Endpoint(
            settings={
                'response_type': ([role_representation.RoleRepresentation],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/scope-mappings/{roleContainerId}/granted',
                'operation_id': 'admin_realms_realm_clients_client_uuid_evaluate_scopes_scope_mappings_role_container_id_granted_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                    'role_container_id',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                    'role_container_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                    'role_container_id':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                    'role_container_id': 'roleContainerId',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                    'role_container_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_evaluate_scopes_scope_mappings_role_container_id_granted_get
        )

        def __admin_realms_realm_clients_client_uuid_evaluate_scopes_scope_mappings_role_container_id_not_granted_get(
            self,
            realm,
            client_uuid,
            role_container_id,
            **kwargs
        ):
            """Get roles, which this client doesn't have scope for and can't have them in the accessToken issued for him.  # noqa: E501

            Defacto all the other roles of particular role container, which are not in {@link #getGrantedScopeMappings()}  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_evaluate_scopes_scope_mappings_role_container_id_not_granted_get(realm, client_uuid, role_container_id, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):
                role_container_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [role_representation.RoleRepresentation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['role_container_id'] = \
                role_container_id
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_evaluate_scopes_scope_mappings_role_container_id_not_granted_get = Endpoint(
            settings={
                'response_type': ([role_representation.RoleRepresentation],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted',
                'operation_id': 'admin_realms_realm_clients_client_uuid_evaluate_scopes_scope_mappings_role_container_id_not_granted_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                    'role_container_id',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                    'role_container_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                    'role_container_id':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                    'role_container_id': 'roleContainerId',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                    'role_container_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_evaluate_scopes_scope_mappings_role_container_id_not_granted_get
        )

        def __admin_realms_realm_clients_client_uuid_get(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Get representation of the client  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_get(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                client_representation.ClientRepresentation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_get = Endpoint(
            settings={
                'response_type': (client_representation.ClientRepresentation,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}',
                'operation_id': 'admin_realms_realm_clients_client_uuid_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_get
        )

        def __admin_realms_realm_clients_client_uuid_installation_providers_provider_id_get(
            self,
            provider_id,
            realm,
            client_uuid,
            **kwargs
        ):
            """/admin/realms/{realm}/clients/{client-uuid}/installation/providers/{providerId}  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_installation_providers_provider_id_get(provider_id, realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                provider_id (str):
                realm (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['provider_id'] = \
                provider_id
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_installation_providers_provider_id_get = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/installation/providers/{providerId}',
                'operation_id': 'admin_realms_realm_clients_client_uuid_installation_providers_provider_id_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'provider_id',
                    'realm',
                    'client_uuid',
                ],
                'required': [
                    'provider_id',
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provider_id':
                        (str,),
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'provider_id': 'providerId',
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'provider_id': 'path',
                    'realm': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_installation_providers_provider_id_get
        )

        def __admin_realms_realm_clients_client_uuid_management_permissions_get(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Return object stating whether client Authorization permissions have been initialized or not and a reference  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_management_permissions_get(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                management_permission_reference.ManagementPermissionReference
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_management_permissions_get = Endpoint(
            settings={
                'response_type': (management_permission_reference.ManagementPermissionReference,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/management/permissions',
                'operation_id': 'admin_realms_realm_clients_client_uuid_management_permissions_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_management_permissions_get
        )

        def __admin_realms_realm_clients_client_uuid_management_permissions_put(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Return object stating whether client Authorization permissions have been initialized or not and a reference  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_management_permissions_put(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                management_permission_reference_management_permission_reference (management_permission_reference.ManagementPermissionReference): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                management_permission_reference.ManagementPermissionReference
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_management_permissions_put = Endpoint(
            settings={
                'response_type': (management_permission_reference.ManagementPermissionReference,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/management/permissions',
                'operation_id': 'admin_realms_realm_clients_client_uuid_management_permissions_put',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                    'management_permission_reference_management_permission_reference',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                    'management_permission_reference_management_permission_reference':
                        (management_permission_reference.ManagementPermissionReference,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                    'management_permission_reference_management_permission_reference': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_management_permissions_put
        )

        def __admin_realms_realm_clients_client_uuid_nodes_node_delete(
            self,
            node,
            realm,
            client_uuid,
            **kwargs
        ):
            """Unregister a cluster node from the client  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_nodes_node_delete(node, realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                node (str):
                realm (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['node'] = \
                node
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_nodes_node_delete = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/nodes/{node}',
                'operation_id': 'admin_realms_realm_clients_client_uuid_nodes_node_delete',
                'http_method': 'DELETE',
                'servers': [],
            },
            params_map={
                'all': [
                    'node',
                    'realm',
                    'client_uuid',
                ],
                'required': [
                    'node',
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'node':
                        (str,),
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'node': 'node',
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'node': 'path',
                    'realm': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_nodes_node_delete
        )

        def __admin_realms_realm_clients_client_uuid_nodes_post(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Register a cluster node with the client Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle by sending registration request to Keycloak  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_nodes_post(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                request_body ({str: (str,)}): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_nodes_post = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/nodes',
                'operation_id': 'admin_realms_realm_clients_client_uuid_nodes_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                    'request_body',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                    'request_body':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_nodes_post
        )

        def __admin_realms_realm_clients_client_uuid_offline_session_count_get(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Get application offline session count Returns a number of offline user sessions associated with this client { \"count\": number }  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_offline_session_count_get(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (int,)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_offline_session_count_get = Endpoint(
            settings={
                'response_type': ({str: (int,)},),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/offline-session-count',
                'operation_id': 'admin_realms_realm_clients_client_uuid_offline_session_count_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_offline_session_count_get
        )

        def __admin_realms_realm_clients_client_uuid_offline_sessions_get(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Get offline sessions for client Returns a list of offline user sessions associated with this client  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_offline_sessions_get(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                first (int): Paging offset. [optional]
                max (int): Maximum results size (defaults to 100). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [user_session_representation.UserSessionRepresentation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_offline_sessions_get = Endpoint(
            settings={
                'response_type': ([user_session_representation.UserSessionRepresentation],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/offline-sessions',
                'operation_id': 'admin_realms_realm_clients_client_uuid_offline_sessions_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                    'first',
                    'max',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                    'first':
                        (int,),
                    'max':
                        (int,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                    'first': 'first',
                    'max': 'max',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                    'first': 'query',
                    'max': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_offline_sessions_get
        )

        def __admin_realms_realm_clients_client_uuid_optional_client_scopes_client_scope_id_delete(
            self,
            client_scope_id,
            realm,
            client_uuid,
            **kwargs
        ):
            """/admin/realms/{realm}/clients/{client-uuid}/optional-client-scopes/{clientScopeId}  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_optional_client_scopes_client_scope_id_delete(client_scope_id, realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                client_scope_id (str):
                realm (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['client_scope_id'] = \
                client_scope_id
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_optional_client_scopes_client_scope_id_delete = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/optional-client-scopes/{clientScopeId}',
                'operation_id': 'admin_realms_realm_clients_client_uuid_optional_client_scopes_client_scope_id_delete',
                'http_method': 'DELETE',
                'servers': [],
            },
            params_map={
                'all': [
                    'client_scope_id',
                    'realm',
                    'client_uuid',
                ],
                'required': [
                    'client_scope_id',
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_scope_id':
                        (str,),
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'client_scope_id': 'clientScopeId',
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'client_scope_id': 'path',
                    'realm': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_optional_client_scopes_client_scope_id_delete
        )

        def __admin_realms_realm_clients_client_uuid_optional_client_scopes_client_scope_id_put(
            self,
            client_scope_id,
            realm,
            client_uuid,
            **kwargs
        ):
            """/admin/realms/{realm}/clients/{client-uuid}/optional-client-scopes/{clientScopeId}  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_optional_client_scopes_client_scope_id_put(client_scope_id, realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                client_scope_id (str):
                realm (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['client_scope_id'] = \
                client_scope_id
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_optional_client_scopes_client_scope_id_put = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/optional-client-scopes/{clientScopeId}',
                'operation_id': 'admin_realms_realm_clients_client_uuid_optional_client_scopes_client_scope_id_put',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'client_scope_id',
                    'realm',
                    'client_uuid',
                ],
                'required': [
                    'client_scope_id',
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_scope_id':
                        (str,),
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'client_scope_id': 'clientScopeId',
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'client_scope_id': 'path',
                    'realm': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_optional_client_scopes_client_scope_id_put
        )

        def __admin_realms_realm_clients_client_uuid_optional_client_scopes_get(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Get optional client scopes.  Only name and ids are returned.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_optional_client_scopes_get(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [client_scope_representation.ClientScopeRepresentation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_optional_client_scopes_get = Endpoint(
            settings={
                'response_type': ([client_scope_representation.ClientScopeRepresentation],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/optional-client-scopes',
                'operation_id': 'admin_realms_realm_clients_client_uuid_optional_client_scopes_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_optional_client_scopes_get
        )

        def __admin_realms_realm_clients_client_uuid_push_revocation_post(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Push the client's revocation policy to its admin URL If the client has an admin URL, push revocation policy to it.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_push_revocation_post(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                global_request_result.GlobalRequestResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_push_revocation_post = Endpoint(
            settings={
                'response_type': (global_request_result.GlobalRequestResult,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/push-revocation',
                'operation_id': 'admin_realms_realm_clients_client_uuid_push_revocation_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_push_revocation_post
        )

        def __admin_realms_realm_clients_client_uuid_put(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Update the client  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_put(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                client_representation_client_representation (client_representation.ClientRepresentation): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_put = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}',
                'operation_id': 'admin_realms_realm_clients_client_uuid_put',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                    'client_representation_client_representation',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                    'client_representation_client_representation':
                        (client_representation.ClientRepresentation,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                    'client_representation_client_representation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_put
        )

        def __admin_realms_realm_clients_client_uuid_registration_access_token_post(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Generate a new registration access token for the client  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_registration_access_token_post(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                client_representation.ClientRepresentation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_registration_access_token_post = Endpoint(
            settings={
                'response_type': (client_representation.ClientRepresentation,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/registration-access-token',
                'operation_id': 'admin_realms_realm_clients_client_uuid_registration_access_token_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_registration_access_token_post
        )

        def __admin_realms_realm_clients_client_uuid_service_account_user_get(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Get a user dedicated to the service account  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_service_account_user_get(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                user_representation.UserRepresentation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_service_account_user_get = Endpoint(
            settings={
                'response_type': (user_representation.UserRepresentation,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/service-account-user',
                'operation_id': 'admin_realms_realm_clients_client_uuid_service_account_user_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_service_account_user_get
        )

        def __admin_realms_realm_clients_client_uuid_session_count_get(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Get application session count Returns a number of user sessions associated with this client { \"count\": number }  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_session_count_get(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (int,)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_session_count_get = Endpoint(
            settings={
                'response_type': ({str: (int,)},),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/session-count',
                'operation_id': 'admin_realms_realm_clients_client_uuid_session_count_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_session_count_get
        )

        def __admin_realms_realm_clients_client_uuid_test_nodes_available_get(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Test if registered cluster nodes are available Tests availability by sending 'ping' request to all cluster nodes.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_test_nodes_available_get(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                global_request_result.GlobalRequestResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_test_nodes_available_get = Endpoint(
            settings={
                'response_type': (global_request_result.GlobalRequestResult,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/test-nodes-available',
                'operation_id': 'admin_realms_realm_clients_client_uuid_test_nodes_available_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_test_nodes_available_get
        )

        def __admin_realms_realm_clients_client_uuid_user_sessions_get(
            self,
            realm,
            client_uuid,
            **kwargs
        ):
            """Get user sessions for client Returns a list of user sessions associated with this client   # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_client_uuid_user_sessions_get(realm, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):
                client_uuid (str):

            Keyword Args:
                first (int): Paging offset. [optional]
                max (int): Maximum results size (defaults to 100). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [user_session_representation.UserSessionRepresentation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_client_uuid_user_sessions_get = Endpoint(
            settings={
                'response_type': ([user_session_representation.UserSessionRepresentation],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients/{client-uuid}/user-sessions',
                'operation_id': 'admin_realms_realm_clients_client_uuid_user_sessions_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_uuid',
                    'first',
                    'max',
                ],
                'required': [
                    'realm',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_uuid':
                        (str,),
                    'first':
                        (int,),
                    'max':
                        (int,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_uuid': 'client-uuid',
                    'first': 'first',
                    'max': 'max',
                },
                'location_map': {
                    'realm': 'path',
                    'client_uuid': 'path',
                    'first': 'query',
                    'max': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_client_uuid_user_sessions_get
        )

        def __admin_realms_realm_clients_get(
            self,
            realm,
            **kwargs
        ):
            """Get clients belonging to the realm.  # noqa: E501

            If a client can’t be retrieved from the storage due to a problem with the underlying storage, it is silently removed from the returned list. This ensures that concurrent modifications to the list don’t prevent callers from retrieving this list.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                client_id (str): filter by clientId. [optional]
                first (int): the first result. [optional]
                max (int): the max results to return. [optional]
                q (str): [optional]
                search (bool): whether this is a search query or a getClientById query. [optional] if omitted the server will use the default value of False
                viewable_only (bool): filter clients that cannot be viewed in full by admin. [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [client_representation.ClientRepresentation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_get = Endpoint(
            settings={
                'response_type': ([client_representation.ClientRepresentation],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients',
                'operation_id': 'admin_realms_realm_clients_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_id',
                    'first',
                    'max',
                    'q',
                    'search',
                    'viewable_only',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_id':
                        (str,),
                    'first':
                        (int,),
                    'max':
                        (int,),
                    'q':
                        (str,),
                    'search':
                        (bool,),
                    'viewable_only':
                        (bool,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client_id': 'clientId',
                    'first': 'first',
                    'max': 'max',
                    'q': 'q',
                    'search': 'search',
                    'viewable_only': 'viewableOnly',
                },
                'location_map': {
                    'realm': 'path',
                    'client_id': 'query',
                    'first': 'query',
                    'max': 'query',
                    'q': 'query',
                    'search': 'query',
                    'viewable_only': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_get
        )

        def __admin_realms_realm_clients_post(
            self,
            realm,
            **kwargs
        ):
            """Create a new client Client’s client_id must be unique!  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_clients_post(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                client_representation_client_representation (client_representation.ClientRepresentation): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_clients_post = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/clients',
                'operation_id': 'admin_realms_realm_clients_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_representation_client_representation',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_representation_client_representation':
                        (client_representation.ClientRepresentation,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                    'client_representation_client_representation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_clients_post
        )


class Endpoint(object):
    def __init__(self, settings=None, params_map=None, root_map=None,
                 headers_map=None, api_client=None, callable=None):
        """Creates an endpoint

        Args:
            settings (dict): see below key value pairs
                'response_type' (tuple/None): response type
                'auth' (list): a list of auth type keys
                'endpoint_path' (str): the endpoint path
                'operation_id' (str): endpoint string identifier
                'http_method' (str): POST/PUT/PATCH/GET etc
                'servers' (list): list of str servers that this endpoint is at
            params_map (dict): see below key value pairs
                'all' (list): list of str endpoint parameter names
                'required' (list): list of required parameter names
                'nullable' (list): list of nullable parameter names
                'enum' (list): list of parameters with enum values
                'validation' (list): list of parameters with validations
            root_map
                'validations' (dict): the dict mapping endpoint parameter tuple
                    paths to their validation dictionaries
                'allowed_values' (dict): the dict mapping endpoint parameter
                    tuple paths to their allowed_values (enum) dictionaries
                'openapi_types' (dict): param_name to openapi type
                'attribute_map' (dict): param_name to camelCase name
                'location_map' (dict): param_name to  'body', 'file', 'form',
                    'header', 'path', 'query'
                collection_format_map (dict): param_name to `csv` etc.
            headers_map (dict): see below key value pairs
                'accept' (list): list of Accept header strings
                'content_type' (list): list of Content-Type header strings
            api_client (ApiClient) api client instance
            callable (function): the function which is invoked when the
                Endpoint is called
        """
        self.settings = settings
        self.params_map = params_map
        self.params_map['all'].extend([
            'async_req',
            '_host_index',
            '_preload_content',
            '_request_timeout',
            '_return_http_data_only',
            '_check_input_type',
            '_check_return_type'
        ])
        self.params_map['nullable'].extend(['_request_timeout'])
        self.validations = root_map['validations']
        self.allowed_values = root_map['allowed_values']
        self.openapi_types = root_map['openapi_types']
        extra_types = {
            'async_req': (bool,),
            '_host_index': (int,),
            '_preload_content': (bool,),
            '_request_timeout': (none_type, int, (int,), [int]),
            '_return_http_data_only': (bool,),
            '_check_input_type': (bool,),
            '_check_return_type': (bool,)
        }
        self.openapi_types.update(extra_types)
        self.attribute_map = root_map['attribute_map']
        self.location_map = root_map['location_map']
        self.collection_format_map = root_map['collection_format_map']
        self.headers_map = headers_map
        self.api_client = api_client
        self.callable = callable

    def __validate_inputs(self, kwargs):
        for param in self.params_map['enum']:
            if param in kwargs:
                check_allowed_values(
                    self.allowed_values,
                    (param,),
                    kwargs[param]
                )

        for param in self.params_map['validation']:
            if param in kwargs:
                check_validations(
                    self.validations,
                    (param,),
                    kwargs[param]
                )

        if kwargs['_check_input_type'] is False:
            return

        for key, value in six.iteritems(kwargs):
            fixed_val = validate_and_convert_types(
                value,
                self.openapi_types[key],
                [key],
                False,
                kwargs['_check_input_type'],
                configuration=self.api_client.configuration
            )
            kwargs[key] = fixed_val

    def __gather_params(self, kwargs):
        params = {
            'body': None,
            'collection_format': {},
            'file': {},
            'form': [],
            'header': {},
            'path': {},
            'query': []
        }

        for param_name, param_value in six.iteritems(kwargs):
            param_location = self.location_map.get(param_name)
            if param_location is None:
                continue
            if param_location:
                if param_location == 'body':
                    params['body'] = param_value
                    continue
                base_name = self.attribute_map[param_name]
                if (param_location == 'form' and
                        self.openapi_types[param_name] == (file_type,)):
                    params['file'][param_name] = [param_value]
                elif (param_location == 'form' and
                        self.openapi_types[param_name] == ([file_type],)):
                    # param_value is already a list
                    params['file'][param_name] = param_value
                elif param_location in {'form', 'query'}:
                    param_value_full = (base_name, param_value)
                    params[param_location].append(param_value_full)
                if param_location not in {'form', 'query'}:
                    params[param_location][base_name] = param_value
                collection_format = self.collection_format_map.get(param_name)
                if collection_format:
                    params['collection_format'][base_name] = collection_format

        return params

    def __call__(self, *args, **kwargs):
        """ This method is invoked when endpoints are called
        Example:
        pet_api = PetApi()
        pet_api.add_pet  # this is an instance of the class Endpoint
        pet_api.add_pet()  # this invokes pet_api.add_pet.__call__()
        which then invokes the callable functions stored in that endpoint at
        pet_api.add_pet.callable or self.callable in this class
        """
        return self.callable(self, *args, **kwargs)

    def call_with_http_info(self, **kwargs):

        try:
            _host = self.settings['servers'][kwargs['_host_index']]
        except IndexError:
            if self.settings['servers']:
                raise ApiValueError(
                    "Invalid host index. Must be 0 <= index < %s" %
                    len(self.settings['servers'])
                )
            _host = None

        for key, value in six.iteritems(kwargs):
            if key not in self.params_map['all']:
                raise ApiTypeError(
                    "Got an unexpected parameter '%s'"
                    " to method `%s`" %
                    (key, self.settings['operation_id'])
                )
            # only throw this nullable ApiValueError if _check_input_type
            # is False, if _check_input_type==True we catch this case
            # in self.__validate_inputs
            if (key not in self.params_map['nullable'] and value is None
                    and kwargs['_check_input_type'] is False):
                raise ApiValueError(
                    "Value may not be None for non-nullable parameter `%s`"
                    " when calling `%s`" %
                    (key, self.settings['operation_id'])
                )

        for key in self.params_map['required']:
            if key not in kwargs.keys():
                raise ApiValueError(
                    "Missing the required parameter `%s` when calling "
                    "`%s`" % (key, self.settings['operation_id'])
                )

        self.__validate_inputs(kwargs)

        params = self.__gather_params(kwargs)

        accept_headers_list = self.headers_map['accept']
        if accept_headers_list:
            params['header']['Accept'] = self.api_client.select_header_accept(
                accept_headers_list)

        content_type_headers_list = self.headers_map['content_type']
        if content_type_headers_list:
            header_list = self.api_client.select_header_content_type(
                content_type_headers_list)
            params['header']['Content-Type'] = header_list

        return self.api_client.call_api(
            self.settings['endpoint_path'], self.settings['http_method'],
            params['path'],
            params['query'],
            params['header'],
            body=params['body'],
            post_params=params['form'],
            files=params['file'],
            response_type=self.settings['response_type'],
            auth_settings=self.settings['auth'],
            async_req=kwargs['async_req'],
            _check_type=kwargs['_check_return_type'],
            _return_http_data_only=kwargs['_return_http_data_only'],
            _preload_content=kwargs['_preload_content'],
            _request_timeout=kwargs['_request_timeout'],
            _host=_host,
            collection_formats=params['collection_format'])
