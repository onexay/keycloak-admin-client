# coding: utf-8

"""
    My Project

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401
import sys  # noqa: F401

# python 2 and python 3 compatibility library
import six

from keycloak_admin_client.api_client import ApiClient
from keycloak_admin_client.exceptions import (
    ApiTypeError,
    ApiValueError
)
from keycloak_admin_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    int,
    none_type,
    str,
    validate_and_convert_types
)
from keycloak_admin_client.models import realm_representation
from keycloak_admin_client.models import admin_event_representation
from keycloak_admin_client.models import client_representation
from keycloak_admin_client.models import client_policies_representation
from keycloak_admin_client.models import client_profiles_representation
from keycloak_admin_client.models import client_types_representation
from keycloak_admin_client.models import client_scope_representation
from keycloak_admin_client.models import group_representation
from keycloak_admin_client.models import realm_events_config_representation
from keycloak_admin_client.models import event_representation
from keycloak_admin_client.models import global_request_result
from keycloak_admin_client.models import management_permission_reference


class KeycloakAdminRealmsAdminApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __admin_realms_get(
            self,
            **kwargs
        ):
            """Get accessible realms Returns a list of accessible realms. The list is filtered based on what realms the caller is allowed to view.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                brief_representation (bool): [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [realm_representation.RealmRepresentation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            return self.call_with_http_info(**kwargs)

        self.admin_realms_get = Endpoint(
            settings={
                'response_type': ([realm_representation.RealmRepresentation],),
                'auth': [],
                'endpoint_path': '/admin/realms',
                'operation_id': 'admin_realms_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'brief_representation',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'brief_representation':
                        (bool,),
                },
                'attribute_map': {
                    'brief_representation': 'briefRepresentation',
                },
                'location_map': {
                    'brief_representation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_get
        )

        def __admin_realms_post(
            self,
            **kwargs
        ):
            """Import a realm. Imports a realm from a full representation of that realm.  # noqa: E501

            Realm name must be unique.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                body (file_type): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            return self.call_with_http_info(**kwargs)

        self.admin_realms_post = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms',
                'operation_id': 'admin_realms_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (file_type,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_post
        )

        def __admin_realms_realm_admin_events_delete(
            self,
            realm,
            **kwargs
        ):
            """Delete all admin events  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_admin_events_delete(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_admin_events_delete = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/admin-events',
                'operation_id': 'admin_realms_realm_admin_events_delete',
                'http_method': 'DELETE',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_admin_events_delete
        )

        def __admin_realms_realm_admin_events_get(
            self,
            realm,
            **kwargs
        ):
            """Get admin events Returns all admin events, or filters events based on URL query parameters listed here  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_admin_events_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                auth_client (str): [optional]
                auth_ip_address (str): [optional]
                auth_realm (str): [optional]
                auth_user (str): user id. [optional]
                date_from (str): [optional]
                date_to (str): [optional]
                first (int): [optional]
                max (int): Maximum results size (defaults to 100). [optional]
                operation_types ([str]): [optional]
                _resource_path (str): [optional]
                resource_types ([str]): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [admin_event_representation.AdminEventRepresentation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_admin_events_get = Endpoint(
            settings={
                'response_type': ([admin_event_representation.AdminEventRepresentation],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/admin-events',
                'operation_id': 'admin_realms_realm_admin_events_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'auth_client',
                    'auth_ip_address',
                    'auth_realm',
                    'auth_user',
                    'date_from',
                    'date_to',
                    'first',
                    'max',
                    'operation_types',
                    '_resource_path',
                    'resource_types',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'auth_client':
                        (str,),
                    'auth_ip_address':
                        (str,),
                    'auth_realm':
                        (str,),
                    'auth_user':
                        (str,),
                    'date_from':
                        (str,),
                    'date_to':
                        (str,),
                    'first':
                        (int,),
                    'max':
                        (int,),
                    'operation_types':
                        ([str],),
                    '_resource_path':
                        (str,),
                    'resource_types':
                        ([str],),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'auth_client': 'authClient',
                    'auth_ip_address': 'authIpAddress',
                    'auth_realm': 'authRealm',
                    'auth_user': 'authUser',
                    'date_from': 'dateFrom',
                    'date_to': 'dateTo',
                    'first': 'first',
                    'max': 'max',
                    'operation_types': 'operationTypes',
                    '_resource_path': 'resourcePath',
                    'resource_types': 'resourceTypes',
                },
                'location_map': {
                    'realm': 'path',
                    'auth_client': 'query',
                    'auth_ip_address': 'query',
                    'auth_realm': 'query',
                    'auth_user': 'query',
                    'date_from': 'query',
                    'date_to': 'query',
                    'first': 'query',
                    'max': 'query',
                    'operation_types': 'query',
                    '_resource_path': 'query',
                    'resource_types': 'query',
                },
                'collection_format_map': {
                    'operation_types': 'multi',
                    'resource_types': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_admin_events_get
        )

        def __admin_realms_realm_client_description_converter_post(
            self,
            realm,
            **kwargs
        ):
            """Base path for importing clients under this realm.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_client_description_converter_post(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                body (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                client_representation.ClientRepresentation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_client_description_converter_post = Endpoint(
            settings={
                'response_type': (client_representation.ClientRepresentation,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/client-description-converter',
                'operation_id': 'admin_realms_realm_client_description_converter_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'body',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'body':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_client_description_converter_post
        )

        def __admin_realms_realm_client_policies_policies_get(
            self,
            realm,
            **kwargs
        ):
            """/admin/realms/{realm}/client-policies/policies  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_client_policies_policies_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                include_global_policies (bool): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                client_policies_representation.ClientPoliciesRepresentation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_client_policies_policies_get = Endpoint(
            settings={
                'response_type': (client_policies_representation.ClientPoliciesRepresentation,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/client-policies/policies',
                'operation_id': 'admin_realms_realm_client_policies_policies_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'include_global_policies',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'include_global_policies':
                        (bool,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'include_global_policies': 'include-global-policies',
                },
                'location_map': {
                    'realm': 'path',
                    'include_global_policies': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_client_policies_policies_get
        )

        def __admin_realms_realm_client_policies_policies_put(
            self,
            realm,
            **kwargs
        ):
            """/admin/realms/{realm}/client-policies/policies  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_client_policies_policies_put(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                client_policies_representation_client_policies_representation (client_policies_representation.ClientPoliciesRepresentation): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_client_policies_policies_put = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/client-policies/policies',
                'operation_id': 'admin_realms_realm_client_policies_policies_put',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_policies_representation_client_policies_representation',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_policies_representation_client_policies_representation':
                        (client_policies_representation.ClientPoliciesRepresentation,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                    'client_policies_representation_client_policies_representation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_client_policies_policies_put
        )

        def __admin_realms_realm_client_policies_profiles_get(
            self,
            realm,
            **kwargs
        ):
            """/admin/realms/{realm}/client-policies/profiles  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_client_policies_profiles_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                include_global_profiles (bool): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                client_profiles_representation.ClientProfilesRepresentation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_client_policies_profiles_get = Endpoint(
            settings={
                'response_type': (client_profiles_representation.ClientProfilesRepresentation,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/client-policies/profiles',
                'operation_id': 'admin_realms_realm_client_policies_profiles_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'include_global_profiles',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'include_global_profiles':
                        (bool,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'include_global_profiles': 'include-global-profiles',
                },
                'location_map': {
                    'realm': 'path',
                    'include_global_profiles': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_client_policies_profiles_get
        )

        def __admin_realms_realm_client_policies_profiles_put(
            self,
            realm,
            **kwargs
        ):
            """/admin/realms/{realm}/client-policies/profiles  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_client_policies_profiles_put(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                client_profiles_representation_client_profiles_representation (client_profiles_representation.ClientProfilesRepresentation): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_client_policies_profiles_put = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/client-policies/profiles',
                'operation_id': 'admin_realms_realm_client_policies_profiles_put',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_profiles_representation_client_profiles_representation',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_profiles_representation_client_profiles_representation':
                        (client_profiles_representation.ClientProfilesRepresentation,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                    'client_profiles_representation_client_profiles_representation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_client_policies_profiles_put
        )

        def __admin_realms_realm_client_session_stats_get(
            self,
            realm,
            **kwargs
        ):
            """Get client session stats Returns a JSON map.  # noqa: E501

            The key is the client id, the value is the number of sessions that currently are active with that client. Only clients that actually have a session associated with them will be in this map.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_client_session_stats_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [{str: (str,)}]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_client_session_stats_get = Endpoint(
            settings={
                'response_type': ([{str: (str,)}],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/client-session-stats',
                'operation_id': 'admin_realms_realm_client_session_stats_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_client_session_stats_get
        )

        def __admin_realms_realm_client_types_get(
            self,
            realm,
            **kwargs
        ):
            """List all client types available in the current realm  # noqa: E501

            This endpoint returns a list of both global and realm level client types and the attributes they set  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_client_types_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                client_types_representation.ClientTypesRepresentation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_client_types_get = Endpoint(
            settings={
                'response_type': (client_types_representation.ClientTypesRepresentation,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/client-types',
                'operation_id': 'admin_realms_realm_client_types_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_client_types_get
        )

        def __admin_realms_realm_client_types_put(
            self,
            realm,
            **kwargs
        ):
            """Update a client type  # noqa: E501

            This endpoint allows you to update a realm level client type  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_client_types_put(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                client_types_representation_client_types_representation (client_types_representation.ClientTypesRepresentation): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_client_types_put = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/client-types',
                'operation_id': 'admin_realms_realm_client_types_put',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client_types_representation_client_types_representation',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client_types_representation_client_types_representation':
                        (client_types_representation.ClientTypesRepresentation,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                    'client_types_representation_client_types_representation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_client_types_put
        )

        def __admin_realms_realm_credential_registrators_get(
            self,
            realm,
            **kwargs
        ):
            """/admin/realms/{realm}/credential-registrators  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_credential_registrators_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [str]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_credential_registrators_get = Endpoint(
            settings={
                'response_type': ([str],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/credential-registrators',
                'operation_id': 'admin_realms_realm_credential_registrators_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_credential_registrators_get
        )

        def __admin_realms_realm_default_default_client_scopes_client_scope_id_delete(
            self,
            client_scope_id,
            realm,
            **kwargs
        ):
            """/admin/realms/{realm}/default-default-client-scopes/{clientScopeId}  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_default_default_client_scopes_client_scope_id_delete(client_scope_id, realm, async_req=True)
            >>> result = thread.get()

            Args:
                client_scope_id (str):
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['client_scope_id'] = \
                client_scope_id
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_default_default_client_scopes_client_scope_id_delete = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/default-default-client-scopes/{clientScopeId}',
                'operation_id': 'admin_realms_realm_default_default_client_scopes_client_scope_id_delete',
                'http_method': 'DELETE',
                'servers': [],
            },
            params_map={
                'all': [
                    'client_scope_id',
                    'realm',
                ],
                'required': [
                    'client_scope_id',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_scope_id':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'client_scope_id': 'clientScopeId',
                    'realm': 'realm',
                },
                'location_map': {
                    'client_scope_id': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_default_default_client_scopes_client_scope_id_delete
        )

        def __admin_realms_realm_default_default_client_scopes_client_scope_id_put(
            self,
            client_scope_id,
            realm,
            **kwargs
        ):
            """/admin/realms/{realm}/default-default-client-scopes/{clientScopeId}  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_default_default_client_scopes_client_scope_id_put(client_scope_id, realm, async_req=True)
            >>> result = thread.get()

            Args:
                client_scope_id (str):
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['client_scope_id'] = \
                client_scope_id
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_default_default_client_scopes_client_scope_id_put = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/default-default-client-scopes/{clientScopeId}',
                'operation_id': 'admin_realms_realm_default_default_client_scopes_client_scope_id_put',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'client_scope_id',
                    'realm',
                ],
                'required': [
                    'client_scope_id',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_scope_id':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'client_scope_id': 'clientScopeId',
                    'realm': 'realm',
                },
                'location_map': {
                    'client_scope_id': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_default_default_client_scopes_client_scope_id_put
        )

        def __admin_realms_realm_default_default_client_scopes_get(
            self,
            realm,
            **kwargs
        ):
            """Get realm default client scopes.  Only name and ids are returned.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_default_default_client_scopes_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [client_scope_representation.ClientScopeRepresentation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_default_default_client_scopes_get = Endpoint(
            settings={
                'response_type': ([client_scope_representation.ClientScopeRepresentation],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/default-default-client-scopes',
                'operation_id': 'admin_realms_realm_default_default_client_scopes_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_default_default_client_scopes_get
        )

        def __admin_realms_realm_default_groups_get(
            self,
            realm,
            **kwargs
        ):
            """Get group hierarchy.  Only name and ids are returned.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_default_groups_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [group_representation.GroupRepresentation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_default_groups_get = Endpoint(
            settings={
                'response_type': ([group_representation.GroupRepresentation],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/default-groups',
                'operation_id': 'admin_realms_realm_default_groups_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_default_groups_get
        )

        def __admin_realms_realm_default_groups_group_id_delete(
            self,
            group_id,
            realm,
            **kwargs
        ):
            """/admin/realms/{realm}/default-groups/{groupId}  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_default_groups_group_id_delete(group_id, realm, async_req=True)
            >>> result = thread.get()

            Args:
                group_id (str):
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['group_id'] = \
                group_id
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_default_groups_group_id_delete = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/default-groups/{groupId}',
                'operation_id': 'admin_realms_realm_default_groups_group_id_delete',
                'http_method': 'DELETE',
                'servers': [],
            },
            params_map={
                'all': [
                    'group_id',
                    'realm',
                ],
                'required': [
                    'group_id',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group_id':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'group_id': 'groupId',
                    'realm': 'realm',
                },
                'location_map': {
                    'group_id': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_default_groups_group_id_delete
        )

        def __admin_realms_realm_default_groups_group_id_put(
            self,
            group_id,
            realm,
            **kwargs
        ):
            """/admin/realms/{realm}/default-groups/{groupId}  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_default_groups_group_id_put(group_id, realm, async_req=True)
            >>> result = thread.get()

            Args:
                group_id (str):
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['group_id'] = \
                group_id
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_default_groups_group_id_put = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/default-groups/{groupId}',
                'operation_id': 'admin_realms_realm_default_groups_group_id_put',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'group_id',
                    'realm',
                ],
                'required': [
                    'group_id',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group_id':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'group_id': 'groupId',
                    'realm': 'realm',
                },
                'location_map': {
                    'group_id': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_default_groups_group_id_put
        )

        def __admin_realms_realm_default_optional_client_scopes_client_scope_id_delete(
            self,
            client_scope_id,
            realm,
            **kwargs
        ):
            """/admin/realms/{realm}/default-optional-client-scopes/{clientScopeId}  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_default_optional_client_scopes_client_scope_id_delete(client_scope_id, realm, async_req=True)
            >>> result = thread.get()

            Args:
                client_scope_id (str):
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['client_scope_id'] = \
                client_scope_id
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_default_optional_client_scopes_client_scope_id_delete = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/default-optional-client-scopes/{clientScopeId}',
                'operation_id': 'admin_realms_realm_default_optional_client_scopes_client_scope_id_delete',
                'http_method': 'DELETE',
                'servers': [],
            },
            params_map={
                'all': [
                    'client_scope_id',
                    'realm',
                ],
                'required': [
                    'client_scope_id',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_scope_id':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'client_scope_id': 'clientScopeId',
                    'realm': 'realm',
                },
                'location_map': {
                    'client_scope_id': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_default_optional_client_scopes_client_scope_id_delete
        )

        def __admin_realms_realm_default_optional_client_scopes_client_scope_id_put(
            self,
            client_scope_id,
            realm,
            **kwargs
        ):
            """/admin/realms/{realm}/default-optional-client-scopes/{clientScopeId}  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_default_optional_client_scopes_client_scope_id_put(client_scope_id, realm, async_req=True)
            >>> result = thread.get()

            Args:
                client_scope_id (str):
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['client_scope_id'] = \
                client_scope_id
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_default_optional_client_scopes_client_scope_id_put = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/default-optional-client-scopes/{clientScopeId}',
                'operation_id': 'admin_realms_realm_default_optional_client_scopes_client_scope_id_put',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'client_scope_id',
                    'realm',
                ],
                'required': [
                    'client_scope_id',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_scope_id':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'client_scope_id': 'clientScopeId',
                    'realm': 'realm',
                },
                'location_map': {
                    'client_scope_id': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_default_optional_client_scopes_client_scope_id_put
        )

        def __admin_realms_realm_default_optional_client_scopes_get(
            self,
            realm,
            **kwargs
        ):
            """Get realm optional client scopes.  Only name and ids are returned.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_default_optional_client_scopes_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [client_scope_representation.ClientScopeRepresentation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_default_optional_client_scopes_get = Endpoint(
            settings={
                'response_type': ([client_scope_representation.ClientScopeRepresentation],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/default-optional-client-scopes',
                'operation_id': 'admin_realms_realm_default_optional_client_scopes_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_default_optional_client_scopes_get
        )

        def __admin_realms_realm_delete(
            self,
            realm,
            **kwargs
        ):
            """Delete the realm  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_delete(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_delete = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}',
                'operation_id': 'admin_realms_realm_delete',
                'http_method': 'DELETE',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_delete
        )

        def __admin_realms_realm_events_config_get(
            self,
            realm,
            **kwargs
        ):
            """Get the events provider configuration Returns JSON object with events provider configuration  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_events_config_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                realm_events_config_representation.RealmEventsConfigRepresentation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_events_config_get = Endpoint(
            settings={
                'response_type': (realm_events_config_representation.RealmEventsConfigRepresentation,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/events/config',
                'operation_id': 'admin_realms_realm_events_config_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_events_config_get
        )

        def __admin_realms_realm_events_config_put(
            self,
            realm,
            **kwargs
        ):
            """/admin/realms/{realm}/events/config  # noqa: E501

            Update the events provider Change the events provider and/or its configuration  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_events_config_put(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                realm_events_config_representation_realm_events_config_representation (realm_events_config_representation.RealmEventsConfigRepresentation): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_events_config_put = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/events/config',
                'operation_id': 'admin_realms_realm_events_config_put',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'realm_events_config_representation_realm_events_config_representation',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'realm_events_config_representation_realm_events_config_representation':
                        (realm_events_config_representation.RealmEventsConfigRepresentation,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                    'realm_events_config_representation_realm_events_config_representation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_events_config_put
        )

        def __admin_realms_realm_events_delete(
            self,
            realm,
            **kwargs
        ):
            """Delete all events  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_events_delete(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_events_delete = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/events',
                'operation_id': 'admin_realms_realm_events_delete',
                'http_method': 'DELETE',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_events_delete
        )

        def __admin_realms_realm_events_get(
            self,
            realm,
            **kwargs
        ):
            """Get events Returns all events, or filters them based on URL query parameters listed here  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_events_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                client (str): App or oauth client name. [optional]
                date_from (str): From date. [optional]
                date_to (str): To date. [optional]
                first (int): Paging offset. [optional]
                ip_address (str): IP Address. [optional]
                max (int): Maximum results size (defaults to 100). [optional]
                type ([str]): The types of events to return. [optional]
                user (str): User id. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [event_representation.EventRepresentation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_events_get = Endpoint(
            settings={
                'response_type': ([event_representation.EventRepresentation],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/events',
                'operation_id': 'admin_realms_realm_events_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'client',
                    'date_from',
                    'date_to',
                    'first',
                    'ip_address',
                    'max',
                    'type',
                    'user',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'client':
                        (str,),
                    'date_from':
                        (str,),
                    'date_to':
                        (str,),
                    'first':
                        (int,),
                    'ip_address':
                        (str,),
                    'max':
                        (int,),
                    'type':
                        ([str],),
                    'user':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'client': 'client',
                    'date_from': 'dateFrom',
                    'date_to': 'dateTo',
                    'first': 'first',
                    'ip_address': 'ipAddress',
                    'max': 'max',
                    'type': 'type',
                    'user': 'user',
                },
                'location_map': {
                    'realm': 'path',
                    'client': 'query',
                    'date_from': 'query',
                    'date_to': 'query',
                    'first': 'query',
                    'ip_address': 'query',
                    'max': 'query',
                    'type': 'query',
                    'user': 'query',
                },
                'collection_format_map': {
                    'type': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_events_get
        )

        def __admin_realms_realm_get(
            self,
            realm,
            **kwargs
        ):
            """Get the top-level representation of the realm It will not include nested information like User and Client representations.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                realm_representation.RealmRepresentation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_get = Endpoint(
            settings={
                'response_type': (realm_representation.RealmRepresentation,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}',
                'operation_id': 'admin_realms_realm_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_get
        )

        def __admin_realms_realm_group_by_path_path_get(
            self,
            path,
            realm,
            **kwargs
        ):
            """/admin/realms/{realm}/group-by-path/{path}  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_group_by_path_path_get(path, realm, async_req=True)
            >>> result = thread.get()

            Args:
                path (str):
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                group_representation.GroupRepresentation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['path'] = \
                path
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_group_by_path_path_get = Endpoint(
            settings={
                'response_type': (group_representation.GroupRepresentation,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/group-by-path/{path}',
                'operation_id': 'admin_realms_realm_group_by_path_path_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'path',
                    'realm',
                ],
                'required': [
                    'path',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'path',
                ]
            },
            root_map={
                'validations': {
                    ('path',): {

                        'regex': {
                            'pattern': r'.*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'path':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'path': 'path',
                    'realm': 'realm',
                },
                'location_map': {
                    'path': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_group_by_path_path_get
        )

        def __admin_realms_realm_localization_get(
            self,
            realm,
            **kwargs
        ):
            """/admin/realms/{realm}/localization  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_localization_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [str]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_localization_get = Endpoint(
            settings={
                'response_type': ([str],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/localization',
                'operation_id': 'admin_realms_realm_localization_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_localization_get
        )

        def __admin_realms_realm_localization_locale_delete(
            self,
            locale,
            realm,
            **kwargs
        ):
            """/admin/realms/{realm}/localization/{locale}  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_localization_locale_delete(locale, realm, async_req=True)
            >>> result = thread.get()

            Args:
                locale (str):
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['locale'] = \
                locale
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_localization_locale_delete = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/localization/{locale}',
                'operation_id': 'admin_realms_realm_localization_locale_delete',
                'http_method': 'DELETE',
                'servers': [],
            },
            params_map={
                'all': [
                    'locale',
                    'realm',
                ],
                'required': [
                    'locale',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'locale':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'locale': 'locale',
                    'realm': 'realm',
                },
                'location_map': {
                    'locale': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_localization_locale_delete
        )

        def __admin_realms_realm_localization_locale_get(
            self,
            locale,
            realm,
            **kwargs
        ):
            """/admin/realms/{realm}/localization/{locale}  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_localization_locale_get(locale, realm, async_req=True)
            >>> result = thread.get()

            Args:
                locale (str):
                realm (str):

            Keyword Args:
                use_realm_default_locale_fallback (bool): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (str,)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['locale'] = \
                locale
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_localization_locale_get = Endpoint(
            settings={
                'response_type': ({str: (str,)},),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/localization/{locale}',
                'operation_id': 'admin_realms_realm_localization_locale_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'locale',
                    'realm',
                    'use_realm_default_locale_fallback',
                ],
                'required': [
                    'locale',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'locale':
                        (str,),
                    'realm':
                        (str,),
                    'use_realm_default_locale_fallback':
                        (bool,),
                },
                'attribute_map': {
                    'locale': 'locale',
                    'realm': 'realm',
                    'use_realm_default_locale_fallback': 'useRealmDefaultLocaleFallback',
                },
                'location_map': {
                    'locale': 'path',
                    'realm': 'path',
                    'use_realm_default_locale_fallback': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_localization_locale_get
        )

        def __admin_realms_realm_localization_locale_key_delete(
            self,
            key,
            locale,
            realm,
            **kwargs
        ):
            """/admin/realms/{realm}/localization/{locale}/{key}  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_localization_locale_key_delete(key, locale, realm, async_req=True)
            >>> result = thread.get()

            Args:
                key (str):
                locale (str):
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['key'] = \
                key
            kwargs['locale'] = \
                locale
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_localization_locale_key_delete = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/localization/{locale}/{key}',
                'operation_id': 'admin_realms_realm_localization_locale_key_delete',
                'http_method': 'DELETE',
                'servers': [],
            },
            params_map={
                'all': [
                    'key',
                    'locale',
                    'realm',
                ],
                'required': [
                    'key',
                    'locale',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'key':
                        (str,),
                    'locale':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'key': 'key',
                    'locale': 'locale',
                    'realm': 'realm',
                },
                'location_map': {
                    'key': 'path',
                    'locale': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_localization_locale_key_delete
        )

        def __admin_realms_realm_localization_locale_key_get(
            self,
            key,
            locale,
            realm,
            **kwargs
        ):
            """/admin/realms/{realm}/localization/{locale}/{key}  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_localization_locale_key_get(key, locale, realm, async_req=True)
            >>> result = thread.get()

            Args:
                key (str):
                locale (str):
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['key'] = \
                key
            kwargs['locale'] = \
                locale
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_localization_locale_key_get = Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/localization/{locale}/{key}',
                'operation_id': 'admin_realms_realm_localization_locale_key_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'key',
                    'locale',
                    'realm',
                ],
                'required': [
                    'key',
                    'locale',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'key':
                        (str,),
                    'locale':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'key': 'key',
                    'locale': 'locale',
                    'realm': 'realm',
                },
                'location_map': {
                    'key': 'path',
                    'locale': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_localization_locale_key_get
        )

        def __admin_realms_realm_localization_locale_key_put(
            self,
            key,
            locale,
            realm,
            **kwargs
        ):
            """/admin/realms/{realm}/localization/{locale}/{key}  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_localization_locale_key_put(key, locale, realm, async_req=True)
            >>> result = thread.get()

            Args:
                key (str):
                locale (str):
                realm (str):

            Keyword Args:
                body (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['key'] = \
                key
            kwargs['locale'] = \
                locale
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_localization_locale_key_put = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/localization/{locale}/{key}',
                'operation_id': 'admin_realms_realm_localization_locale_key_put',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'key',
                    'locale',
                    'realm',
                    'body',
                ],
                'required': [
                    'key',
                    'locale',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'key':
                        (str,),
                    'locale':
                        (str,),
                    'realm':
                        (str,),
                    'body':
                        (str,),
                },
                'attribute_map': {
                    'key': 'key',
                    'locale': 'locale',
                    'realm': 'realm',
                },
                'location_map': {
                    'key': 'path',
                    'locale': 'path',
                    'realm': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'text/plain'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_localization_locale_key_put
        )

        def __admin_realms_realm_localization_locale_post(
            self,
            locale,
            realm,
            **kwargs
        ):
            """Import localization from uploaded JSON file  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_localization_locale_post(locale, realm, async_req=True)
            >>> result = thread.get()

            Args:
                locale (str):
                realm (str):

            Keyword Args:
                request_body ({str: (str,)}): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['locale'] = \
                locale
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_localization_locale_post = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/localization/{locale}',
                'operation_id': 'admin_realms_realm_localization_locale_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'locale',
                    'realm',
                    'request_body',
                ],
                'required': [
                    'locale',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'locale':
                        (str,),
                    'realm':
                        (str,),
                    'request_body':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'locale': 'locale',
                    'realm': 'realm',
                },
                'location_map': {
                    'locale': 'path',
                    'realm': 'path',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_localization_locale_post
        )

        def __admin_realms_realm_logout_all_post(
            self,
            realm,
            **kwargs
        ):
            """Removes all user sessions.  # noqa: E501

            Any client that has an admin url will also be told to invalidate any sessions they have.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_logout_all_post(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                global_request_result.GlobalRequestResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_logout_all_post = Endpoint(
            settings={
                'response_type': (global_request_result.GlobalRequestResult,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/logout-all',
                'operation_id': 'admin_realms_realm_logout_all_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_logout_all_post
        )

        def __admin_realms_realm_partial_export_post(
            self,
            realm,
            **kwargs
        ):
            """Partial export of existing realm into a JSON file.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_partial_export_post(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                export_clients (bool): [optional]
                export_groups_and_roles (bool): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_partial_export_post = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/partial-export',
                'operation_id': 'admin_realms_realm_partial_export_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'export_clients',
                    'export_groups_and_roles',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'export_clients':
                        (bool,),
                    'export_groups_and_roles':
                        (bool,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'export_clients': 'exportClients',
                    'export_groups_and_roles': 'exportGroupsAndRoles',
                },
                'location_map': {
                    'realm': 'path',
                    'export_clients': 'query',
                    'export_groups_and_roles': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_partial_export_post
        )

        def __admin_realms_realm_partial_import_post(
            self,
            realm,
            **kwargs
        ):
            """Partial import from a JSON file to an existing realm.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_partial_import_post(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                body (file_type): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_partial_import_post = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/partialImport',
                'operation_id': 'admin_realms_realm_partial_import_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'body',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'body':
                        (file_type,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_partial_import_post
        )

        def __admin_realms_realm_push_revocation_post(
            self,
            realm,
            **kwargs
        ):
            """Push the realm's revocation policy to any client that has an admin url associated with it.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_push_revocation_post(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                global_request_result.GlobalRequestResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_push_revocation_post = Endpoint(
            settings={
                'response_type': (global_request_result.GlobalRequestResult,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/push-revocation',
                'operation_id': 'admin_realms_realm_push_revocation_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_push_revocation_post
        )

        def __admin_realms_realm_put(
            self,
            realm,
            **kwargs
        ):
            """Update the top-level information of the realm Any user, roles or client information in the representation will be ignored.  # noqa: E501

            This will only update top-level attributes of the realm.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_put(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                realm_representation_realm_representation (realm_representation.RealmRepresentation): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_put = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}',
                'operation_id': 'admin_realms_realm_put',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'realm_representation_realm_representation',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'realm_representation_realm_representation':
                        (realm_representation.RealmRepresentation,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                    'realm_representation_realm_representation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_put
        )

        def __admin_realms_realm_sessions_session_delete(
            self,
            session,
            realm,
            **kwargs
        ):
            """Remove a specific user session.  # noqa: E501

            Any client that has an admin url will also be told to invalidate this particular session.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_sessions_session_delete(session, realm, async_req=True)
            >>> result = thread.get()

            Args:
                session (str):
                realm (str):

            Keyword Args:
                is_offline (bool): [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['session'] = \
                session
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_sessions_session_delete = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/sessions/{session}',
                'operation_id': 'admin_realms_realm_sessions_session_delete',
                'http_method': 'DELETE',
                'servers': [],
            },
            params_map={
                'all': [
                    'session',
                    'realm',
                    'is_offline',
                ],
                'required': [
                    'session',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'session':
                        (str,),
                    'realm':
                        (str,),
                    'is_offline':
                        (bool,),
                },
                'attribute_map': {
                    'session': 'session',
                    'realm': 'realm',
                    'is_offline': 'isOffline',
                },
                'location_map': {
                    'session': 'path',
                    'realm': 'path',
                    'is_offline': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_sessions_session_delete
        )

        def __admin_realms_realm_test_smtp_connection_post(
            self,
            realm,
            **kwargs
        ):
            """Test SMTP connection with current logged in user  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_test_smtp_connection_post(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                config (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_test_smtp_connection_post = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/testSMTPConnection',
                'operation_id': 'admin_realms_realm_test_smtp_connection_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'config',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'config':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                    'config': 'config',
                },
                'location_map': {
                    'realm': 'path',
                    'config': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_test_smtp_connection_post
        )

        def __admin_realms_realm_users_management_permissions_get(
            self,
            realm,
            **kwargs
        ):
            """/admin/realms/{realm}/users-management-permissions  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_users_management_permissions_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                management_permission_reference.ManagementPermissionReference
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_users_management_permissions_get = Endpoint(
            settings={
                'response_type': (management_permission_reference.ManagementPermissionReference,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/users-management-permissions',
                'operation_id': 'admin_realms_realm_users_management_permissions_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_users_management_permissions_get
        )

        def __admin_realms_realm_users_management_permissions_put(
            self,
            realm,
            **kwargs
        ):
            """/admin/realms/{realm}/users-management-permissions  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_users_management_permissions_put(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                management_permission_reference_management_permission_reference (management_permission_reference.ManagementPermissionReference): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                management_permission_reference.ManagementPermissionReference
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_users_management_permissions_put = Endpoint(
            settings={
                'response_type': (management_permission_reference.ManagementPermissionReference,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/users-management-permissions',
                'operation_id': 'admin_realms_realm_users_management_permissions_put',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'management_permission_reference_management_permission_reference',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'management_permission_reference_management_permission_reference':
                        (management_permission_reference.ManagementPermissionReference,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                    'management_permission_reference_management_permission_reference': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_users_management_permissions_put
        )


class Endpoint(object):
    def __init__(self, settings=None, params_map=None, root_map=None,
                 headers_map=None, api_client=None, callable=None):
        """Creates an endpoint

        Args:
            settings (dict): see below key value pairs
                'response_type' (tuple/None): response type
                'auth' (list): a list of auth type keys
                'endpoint_path' (str): the endpoint path
                'operation_id' (str): endpoint string identifier
                'http_method' (str): POST/PUT/PATCH/GET etc
                'servers' (list): list of str servers that this endpoint is at
            params_map (dict): see below key value pairs
                'all' (list): list of str endpoint parameter names
                'required' (list): list of required parameter names
                'nullable' (list): list of nullable parameter names
                'enum' (list): list of parameters with enum values
                'validation' (list): list of parameters with validations
            root_map
                'validations' (dict): the dict mapping endpoint parameter tuple
                    paths to their validation dictionaries
                'allowed_values' (dict): the dict mapping endpoint parameter
                    tuple paths to their allowed_values (enum) dictionaries
                'openapi_types' (dict): param_name to openapi type
                'attribute_map' (dict): param_name to camelCase name
                'location_map' (dict): param_name to  'body', 'file', 'form',
                    'header', 'path', 'query'
                collection_format_map (dict): param_name to `csv` etc.
            headers_map (dict): see below key value pairs
                'accept' (list): list of Accept header strings
                'content_type' (list): list of Content-Type header strings
            api_client (ApiClient) api client instance
            callable (function): the function which is invoked when the
                Endpoint is called
        """
        self.settings = settings
        self.params_map = params_map
        self.params_map['all'].extend([
            'async_req',
            '_host_index',
            '_preload_content',
            '_request_timeout',
            '_return_http_data_only',
            '_check_input_type',
            '_check_return_type'
        ])
        self.params_map['nullable'].extend(['_request_timeout'])
        self.validations = root_map['validations']
        self.allowed_values = root_map['allowed_values']
        self.openapi_types = root_map['openapi_types']
        extra_types = {
            'async_req': (bool,),
            '_host_index': (int,),
            '_preload_content': (bool,),
            '_request_timeout': (none_type, int, (int,), [int]),
            '_return_http_data_only': (bool,),
            '_check_input_type': (bool,),
            '_check_return_type': (bool,)
        }
        self.openapi_types.update(extra_types)
        self.attribute_map = root_map['attribute_map']
        self.location_map = root_map['location_map']
        self.collection_format_map = root_map['collection_format_map']
        self.headers_map = headers_map
        self.api_client = api_client
        self.callable = callable

    def __validate_inputs(self, kwargs):
        for param in self.params_map['enum']:
            if param in kwargs:
                check_allowed_values(
                    self.allowed_values,
                    (param,),
                    kwargs[param]
                )

        for param in self.params_map['validation']:
            if param in kwargs:
                check_validations(
                    self.validations,
                    (param,),
                    kwargs[param]
                )

        if kwargs['_check_input_type'] is False:
            return

        for key, value in six.iteritems(kwargs):
            fixed_val = validate_and_convert_types(
                value,
                self.openapi_types[key],
                [key],
                False,
                kwargs['_check_input_type'],
                configuration=self.api_client.configuration
            )
            kwargs[key] = fixed_val

    def __gather_params(self, kwargs):
        params = {
            'body': None,
            'collection_format': {},
            'file': {},
            'form': [],
            'header': {},
            'path': {},
            'query': []
        }

        for param_name, param_value in six.iteritems(kwargs):
            param_location = self.location_map.get(param_name)
            if param_location is None:
                continue
            if param_location:
                if param_location == 'body':
                    params['body'] = param_value
                    continue
                base_name = self.attribute_map[param_name]
                if (param_location == 'form' and
                        self.openapi_types[param_name] == (file_type,)):
                    params['file'][param_name] = [param_value]
                elif (param_location == 'form' and
                        self.openapi_types[param_name] == ([file_type],)):
                    # param_value is already a list
                    params['file'][param_name] = param_value
                elif param_location in {'form', 'query'}:
                    param_value_full = (base_name, param_value)
                    params[param_location].append(param_value_full)
                if param_location not in {'form', 'query'}:
                    params[param_location][base_name] = param_value
                collection_format = self.collection_format_map.get(param_name)
                if collection_format:
                    params['collection_format'][base_name] = collection_format

        return params

    def __call__(self, *args, **kwargs):
        """ This method is invoked when endpoints are called
        Example:
        pet_api = PetApi()
        pet_api.add_pet  # this is an instance of the class Endpoint
        pet_api.add_pet()  # this invokes pet_api.add_pet.__call__()
        which then invokes the callable functions stored in that endpoint at
        pet_api.add_pet.callable or self.callable in this class
        """
        return self.callable(self, *args, **kwargs)

    def call_with_http_info(self, **kwargs):

        try:
            _host = self.settings['servers'][kwargs['_host_index']]
        except IndexError:
            if self.settings['servers']:
                raise ApiValueError(
                    "Invalid host index. Must be 0 <= index < %s" %
                    len(self.settings['servers'])
                )
            _host = None

        for key, value in six.iteritems(kwargs):
            if key not in self.params_map['all']:
                raise ApiTypeError(
                    "Got an unexpected parameter '%s'"
                    " to method `%s`" %
                    (key, self.settings['operation_id'])
                )
            # only throw this nullable ApiValueError if _check_input_type
            # is False, if _check_input_type==True we catch this case
            # in self.__validate_inputs
            if (key not in self.params_map['nullable'] and value is None
                    and kwargs['_check_input_type'] is False):
                raise ApiValueError(
                    "Value may not be None for non-nullable parameter `%s`"
                    " when calling `%s`" %
                    (key, self.settings['operation_id'])
                )

        for key in self.params_map['required']:
            if key not in kwargs.keys():
                raise ApiValueError(
                    "Missing the required parameter `%s` when calling "
                    "`%s`" % (key, self.settings['operation_id'])
                )

        self.__validate_inputs(kwargs)

        params = self.__gather_params(kwargs)

        accept_headers_list = self.headers_map['accept']
        if accept_headers_list:
            params['header']['Accept'] = self.api_client.select_header_accept(
                accept_headers_list)

        content_type_headers_list = self.headers_map['content_type']
        if content_type_headers_list:
            header_list = self.api_client.select_header_content_type(
                content_type_headers_list)
            params['header']['Content-Type'] = header_list

        return self.api_client.call_api(
            self.settings['endpoint_path'], self.settings['http_method'],
            params['path'],
            params['query'],
            params['header'],
            body=params['body'],
            post_params=params['form'],
            files=params['file'],
            response_type=self.settings['response_type'],
            auth_settings=self.settings['auth'],
            async_req=kwargs['async_req'],
            _check_type=kwargs['_check_return_type'],
            _return_http_data_only=kwargs['_return_http_data_only'],
            _preload_content=kwargs['_preload_content'],
            _request_timeout=kwargs['_request_timeout'],
            _host=_host,
            collection_formats=params['collection_format'])
