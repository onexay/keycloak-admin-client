# coding: utf-8

"""
    My Project

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401
import sys  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (
    ApiTypeError,
    ApiValueError
)
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    int,
    none_type,
    str,
    validate_and_convert_types
)
from openapi_client.models import authenticator_config_info_representation
from openapi_client.models import authenticator_config_representation
from openapi_client.models import authentication_execution_representation
from openapi_client.models import authentication_execution_info_representation
from openapi_client.models import authentication_flow_representation
from openapi_client.models import required_action_config_info_representation
from openapi_client.models import required_action_config_representation
from openapi_client.models import required_action_provider_representation


class KeycloakAdminAuthenticationManagementApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __admin_realms_realm_authentication_authenticator_providers_get(
            self,
            realm,
            **kwargs
        ):
            """Get authenticator providers Returns a stream of authenticator providers.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_authenticator_providers_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [{str: (str,)}]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_authenticator_providers_get = Endpoint(
            settings={
                'response_type': ([{str: (str,)}],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/authenticator-providers',
                'operation_id': 'admin_realms_realm_authentication_authenticator_providers_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_authenticator_providers_get
        )

        def __admin_realms_realm_authentication_client_authenticator_providers_get(
            self,
            realm,
            **kwargs
        ):
            """Get client authenticator providers Returns a stream of client authenticator providers.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_client_authenticator_providers_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [{str: (str,)}]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_client_authenticator_providers_get = Endpoint(
            settings={
                'response_type': ([{str: (str,)}],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/client-authenticator-providers',
                'operation_id': 'admin_realms_realm_authentication_client_authenticator_providers_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_client_authenticator_providers_get
        )

        def __admin_realms_realm_authentication_config_description_provider_id_get(
            self,
            provider_id,
            realm,
            **kwargs
        ):
            """Get authenticator provider's configuration description  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_config_description_provider_id_get(provider_id, realm, async_req=True)
            >>> result = thread.get()

            Args:
                provider_id (str):
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                authenticator_config_info_representation.AuthenticatorConfigInfoRepresentation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['provider_id'] = \
                provider_id
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_config_description_provider_id_get = Endpoint(
            settings={
                'response_type': (authenticator_config_info_representation.AuthenticatorConfigInfoRepresentation,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/config-description/{providerId}',
                'operation_id': 'admin_realms_realm_authentication_config_description_provider_id_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'provider_id',
                    'realm',
                ],
                'required': [
                    'provider_id',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provider_id':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'provider_id': 'providerId',
                    'realm': 'realm',
                },
                'location_map': {
                    'provider_id': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_config_description_provider_id_get
        )

        def __admin_realms_realm_authentication_config_id_delete(
            self,
            id,
            realm,
            **kwargs
        ):
            """Delete authenticator configuration  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_config_id_delete(id, realm, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): Configuration id
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['id'] = \
                id
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_config_id_delete = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/config/{id}',
                'operation_id': 'admin_realms_realm_authentication_config_id_delete',
                'http_method': 'DELETE',
                'servers': [],
            },
            params_map={
                'all': [
                    'id',
                    'realm',
                ],
                'required': [
                    'id',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'realm': 'realm',
                },
                'location_map': {
                    'id': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_config_id_delete
        )

        def __admin_realms_realm_authentication_config_id_get(
            self,
            id,
            realm,
            **kwargs
        ):
            """Get authenticator configuration  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_config_id_get(id, realm, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): Configuration id
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                authenticator_config_representation.AuthenticatorConfigRepresentation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['id'] = \
                id
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_config_id_get = Endpoint(
            settings={
                'response_type': (authenticator_config_representation.AuthenticatorConfigRepresentation,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/config/{id}',
                'operation_id': 'admin_realms_realm_authentication_config_id_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'id',
                    'realm',
                ],
                'required': [
                    'id',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'realm': 'realm',
                },
                'location_map': {
                    'id': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_config_id_get
        )

        def __admin_realms_realm_authentication_config_id_put(
            self,
            id,
            realm,
            **kwargs
        ):
            """Update authenticator configuration  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_config_id_put(id, realm, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): Configuration id
                realm (str):

            Keyword Args:
                authenticator_config_representation_authenticator_config_representation (authenticator_config_representation.AuthenticatorConfigRepresentation): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['id'] = \
                id
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_config_id_put = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/config/{id}',
                'operation_id': 'admin_realms_realm_authentication_config_id_put',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'id',
                    'realm',
                    'authenticator_config_representation_authenticator_config_representation',
                ],
                'required': [
                    'id',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'realm':
                        (str,),
                    'authenticator_config_representation_authenticator_config_representation':
                        (authenticator_config_representation.AuthenticatorConfigRepresentation,),
                },
                'attribute_map': {
                    'id': 'id',
                    'realm': 'realm',
                },
                'location_map': {
                    'id': 'path',
                    'realm': 'path',
                    'authenticator_config_representation_authenticator_config_representation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_config_id_put
        )

        def __admin_realms_realm_authentication_config_post(
            self,
            realm,
            **kwargs
        ):
            """Create new authenticator configuration  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_config_post(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                authenticator_config_representation_authenticator_config_representation (authenticator_config_representation.AuthenticatorConfigRepresentation): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_config_post = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/config',
                'operation_id': 'admin_realms_realm_authentication_config_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'authenticator_config_representation_authenticator_config_representation',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'authenticator_config_representation_authenticator_config_representation':
                        (authenticator_config_representation.AuthenticatorConfigRepresentation,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                    'authenticator_config_representation_authenticator_config_representation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_config_post
        )

        def __admin_realms_realm_authentication_executions_execution_id_config_id_get(
            self,
            execution_id,
            id,
            realm,
            **kwargs
        ):
            """Get execution's configuration  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_executions_execution_id_config_id_get(execution_id, id, realm, async_req=True)
            >>> result = thread.get()

            Args:
                execution_id (str): Execution id
                id (str): Configuration id
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                authenticator_config_representation.AuthenticatorConfigRepresentation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['execution_id'] = \
                execution_id
            kwargs['id'] = \
                id
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_executions_execution_id_config_id_get = Endpoint(
            settings={
                'response_type': (authenticator_config_representation.AuthenticatorConfigRepresentation,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/executions/{executionId}/config/{id}',
                'operation_id': 'admin_realms_realm_authentication_executions_execution_id_config_id_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'execution_id',
                    'id',
                    'realm',
                ],
                'required': [
                    'execution_id',
                    'id',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'execution_id':
                        (str,),
                    'id':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'execution_id': 'executionId',
                    'id': 'id',
                    'realm': 'realm',
                },
                'location_map': {
                    'execution_id': 'path',
                    'id': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_executions_execution_id_config_id_get
        )

        def __admin_realms_realm_authentication_executions_execution_id_config_post(
            self,
            execution_id,
            realm,
            **kwargs
        ):
            """Update execution with new configuration  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_executions_execution_id_config_post(execution_id, realm, async_req=True)
            >>> result = thread.get()

            Args:
                execution_id (str): Execution id
                realm (str):

            Keyword Args:
                authenticator_config_representation_authenticator_config_representation (authenticator_config_representation.AuthenticatorConfigRepresentation): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['execution_id'] = \
                execution_id
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_executions_execution_id_config_post = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/executions/{executionId}/config',
                'operation_id': 'admin_realms_realm_authentication_executions_execution_id_config_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'execution_id',
                    'realm',
                    'authenticator_config_representation_authenticator_config_representation',
                ],
                'required': [
                    'execution_id',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'execution_id':
                        (str,),
                    'realm':
                        (str,),
                    'authenticator_config_representation_authenticator_config_representation':
                        (authenticator_config_representation.AuthenticatorConfigRepresentation,),
                },
                'attribute_map': {
                    'execution_id': 'executionId',
                    'realm': 'realm',
                },
                'location_map': {
                    'execution_id': 'path',
                    'realm': 'path',
                    'authenticator_config_representation_authenticator_config_representation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_executions_execution_id_config_post
        )

        def __admin_realms_realm_authentication_executions_execution_id_delete(
            self,
            execution_id,
            realm,
            **kwargs
        ):
            """Delete execution  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_executions_execution_id_delete(execution_id, realm, async_req=True)
            >>> result = thread.get()

            Args:
                execution_id (str): Execution id
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['execution_id'] = \
                execution_id
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_executions_execution_id_delete = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/executions/{executionId}',
                'operation_id': 'admin_realms_realm_authentication_executions_execution_id_delete',
                'http_method': 'DELETE',
                'servers': [],
            },
            params_map={
                'all': [
                    'execution_id',
                    'realm',
                ],
                'required': [
                    'execution_id',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'execution_id':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'execution_id': 'executionId',
                    'realm': 'realm',
                },
                'location_map': {
                    'execution_id': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_executions_execution_id_delete
        )

        def __admin_realms_realm_authentication_executions_execution_id_get(
            self,
            execution_id,
            realm,
            **kwargs
        ):
            """Get Single Execution  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_executions_execution_id_get(execution_id, realm, async_req=True)
            >>> result = thread.get()

            Args:
                execution_id (str):
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                authentication_execution_representation.AuthenticationExecutionRepresentation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['execution_id'] = \
                execution_id
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_executions_execution_id_get = Endpoint(
            settings={
                'response_type': (authentication_execution_representation.AuthenticationExecutionRepresentation,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/executions/{executionId}',
                'operation_id': 'admin_realms_realm_authentication_executions_execution_id_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'execution_id',
                    'realm',
                ],
                'required': [
                    'execution_id',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'execution_id':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'execution_id': 'executionId',
                    'realm': 'realm',
                },
                'location_map': {
                    'execution_id': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_executions_execution_id_get
        )

        def __admin_realms_realm_authentication_executions_execution_id_lower_priority_post(
            self,
            execution_id,
            realm,
            **kwargs
        ):
            """Lower execution's priority  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_executions_execution_id_lower_priority_post(execution_id, realm, async_req=True)
            >>> result = thread.get()

            Args:
                execution_id (str): Execution id
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['execution_id'] = \
                execution_id
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_executions_execution_id_lower_priority_post = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/executions/{executionId}/lower-priority',
                'operation_id': 'admin_realms_realm_authentication_executions_execution_id_lower_priority_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'execution_id',
                    'realm',
                ],
                'required': [
                    'execution_id',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'execution_id':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'execution_id': 'executionId',
                    'realm': 'realm',
                },
                'location_map': {
                    'execution_id': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_executions_execution_id_lower_priority_post
        )

        def __admin_realms_realm_authentication_executions_execution_id_raise_priority_post(
            self,
            execution_id,
            realm,
            **kwargs
        ):
            """Raise execution's priority  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_executions_execution_id_raise_priority_post(execution_id, realm, async_req=True)
            >>> result = thread.get()

            Args:
                execution_id (str): Execution id
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['execution_id'] = \
                execution_id
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_executions_execution_id_raise_priority_post = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/executions/{executionId}/raise-priority',
                'operation_id': 'admin_realms_realm_authentication_executions_execution_id_raise_priority_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'execution_id',
                    'realm',
                ],
                'required': [
                    'execution_id',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'execution_id':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'execution_id': 'executionId',
                    'realm': 'realm',
                },
                'location_map': {
                    'execution_id': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_executions_execution_id_raise_priority_post
        )

        def __admin_realms_realm_authentication_executions_post(
            self,
            realm,
            **kwargs
        ):
            """Add new authentication execution  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_executions_post(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                authentication_execution_representation_authentication_execution_representation (authentication_execution_representation.AuthenticationExecutionRepresentation): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_executions_post = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/executions',
                'operation_id': 'admin_realms_realm_authentication_executions_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'authentication_execution_representation_authentication_execution_representation',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'authentication_execution_representation_authentication_execution_representation':
                        (authentication_execution_representation.AuthenticationExecutionRepresentation,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                    'authentication_execution_representation_authentication_execution_representation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_executions_post
        )

        def __admin_realms_realm_authentication_flows_flow_alias_copy_post(
            self,
            flow_alias,
            realm,
            **kwargs
        ):
            """Copy existing authentication flow under a new name The new name is given as 'newName' attribute of the passed JSON object  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_flows_flow_alias_copy_post(flow_alias, realm, async_req=True)
            >>> result = thread.get()

            Args:
                flow_alias (str): name of the existing authentication flow
                realm (str):

            Keyword Args:
                request_body ({str: (str,)}): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['flow_alias'] = \
                flow_alias
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_flows_flow_alias_copy_post = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/flows/{flowAlias}/copy',
                'operation_id': 'admin_realms_realm_authentication_flows_flow_alias_copy_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'flow_alias',
                    'realm',
                    'request_body',
                ],
                'required': [
                    'flow_alias',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'flow_alias':
                        (str,),
                    'realm':
                        (str,),
                    'request_body':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'flow_alias': 'flowAlias',
                    'realm': 'realm',
                },
                'location_map': {
                    'flow_alias': 'path',
                    'realm': 'path',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_flows_flow_alias_copy_post
        )

        def __admin_realms_realm_authentication_flows_flow_alias_executions_execution_post(
            self,
            flow_alias,
            realm,
            **kwargs
        ):
            """Add new authentication execution to a flow  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_flows_flow_alias_executions_execution_post(flow_alias, realm, async_req=True)
            >>> result = thread.get()

            Args:
                flow_alias (str): Alias of parent flow
                realm (str):

            Keyword Args:
                request_body ({str: (str,)}): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['flow_alias'] = \
                flow_alias
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_flows_flow_alias_executions_execution_post = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/flows/{flowAlias}/executions/execution',
                'operation_id': 'admin_realms_realm_authentication_flows_flow_alias_executions_execution_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'flow_alias',
                    'realm',
                    'request_body',
                ],
                'required': [
                    'flow_alias',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'flow_alias':
                        (str,),
                    'realm':
                        (str,),
                    'request_body':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'flow_alias': 'flowAlias',
                    'realm': 'realm',
                },
                'location_map': {
                    'flow_alias': 'path',
                    'realm': 'path',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_flows_flow_alias_executions_execution_post
        )

        def __admin_realms_realm_authentication_flows_flow_alias_executions_flow_post(
            self,
            flow_alias,
            realm,
            **kwargs
        ):
            """Add new flow with new execution to existing flow  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_flows_flow_alias_executions_flow_post(flow_alias, realm, async_req=True)
            >>> result = thread.get()

            Args:
                flow_alias (str): Alias of parent authentication flow
                realm (str):

            Keyword Args:
                request_body ({str: (str,)}): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['flow_alias'] = \
                flow_alias
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_flows_flow_alias_executions_flow_post = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/flows/{flowAlias}/executions/flow',
                'operation_id': 'admin_realms_realm_authentication_flows_flow_alias_executions_flow_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'flow_alias',
                    'realm',
                    'request_body',
                ],
                'required': [
                    'flow_alias',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'flow_alias':
                        (str,),
                    'realm':
                        (str,),
                    'request_body':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'flow_alias': 'flowAlias',
                    'realm': 'realm',
                },
                'location_map': {
                    'flow_alias': 'path',
                    'realm': 'path',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_flows_flow_alias_executions_flow_post
        )

        def __admin_realms_realm_authentication_flows_flow_alias_executions_get(
            self,
            flow_alias,
            realm,
            **kwargs
        ):
            """Get authentication executions for a flow  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_flows_flow_alias_executions_get(flow_alias, realm, async_req=True)
            >>> result = thread.get()

            Args:
                flow_alias (str): Flow alias
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [authentication_execution_info_representation.AuthenticationExecutionInfoRepresentation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['flow_alias'] = \
                flow_alias
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_flows_flow_alias_executions_get = Endpoint(
            settings={
                'response_type': ([authentication_execution_info_representation.AuthenticationExecutionInfoRepresentation],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/flows/{flowAlias}/executions',
                'operation_id': 'admin_realms_realm_authentication_flows_flow_alias_executions_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'flow_alias',
                    'realm',
                ],
                'required': [
                    'flow_alias',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'flow_alias':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'flow_alias': 'flowAlias',
                    'realm': 'realm',
                },
                'location_map': {
                    'flow_alias': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_flows_flow_alias_executions_get
        )

        def __admin_realms_realm_authentication_flows_flow_alias_executions_put(
            self,
            flow_alias,
            realm,
            **kwargs
        ):
            """Update authentication executions of a Flow  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_flows_flow_alias_executions_put(flow_alias, realm, async_req=True)
            >>> result = thread.get()

            Args:
                flow_alias (str): Flow alias
                realm (str):

            Keyword Args:
                authentication_execution_info_representation_authentication_execution_info_representation (authentication_execution_info_representation.AuthenticationExecutionInfoRepresentation): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['flow_alias'] = \
                flow_alias
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_flows_flow_alias_executions_put = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/flows/{flowAlias}/executions',
                'operation_id': 'admin_realms_realm_authentication_flows_flow_alias_executions_put',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'flow_alias',
                    'realm',
                    'authentication_execution_info_representation_authentication_execution_info_representation',
                ],
                'required': [
                    'flow_alias',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'flow_alias':
                        (str,),
                    'realm':
                        (str,),
                    'authentication_execution_info_representation_authentication_execution_info_representation':
                        (authentication_execution_info_representation.AuthenticationExecutionInfoRepresentation,),
                },
                'attribute_map': {
                    'flow_alias': 'flowAlias',
                    'realm': 'realm',
                },
                'location_map': {
                    'flow_alias': 'path',
                    'realm': 'path',
                    'authentication_execution_info_representation_authentication_execution_info_representation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_flows_flow_alias_executions_put
        )

        def __admin_realms_realm_authentication_flows_get(
            self,
            realm,
            **kwargs
        ):
            """Get authentication flows Returns a stream of authentication flows.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_flows_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [authentication_flow_representation.AuthenticationFlowRepresentation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_flows_get = Endpoint(
            settings={
                'response_type': ([authentication_flow_representation.AuthenticationFlowRepresentation],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/flows',
                'operation_id': 'admin_realms_realm_authentication_flows_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_flows_get
        )

        def __admin_realms_realm_authentication_flows_id_delete(
            self,
            id,
            realm,
            **kwargs
        ):
            """Delete an authentication flow  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_flows_id_delete(id, realm, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): Flow id
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['id'] = \
                id
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_flows_id_delete = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/flows/{id}',
                'operation_id': 'admin_realms_realm_authentication_flows_id_delete',
                'http_method': 'DELETE',
                'servers': [],
            },
            params_map={
                'all': [
                    'id',
                    'realm',
                ],
                'required': [
                    'id',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'realm': 'realm',
                },
                'location_map': {
                    'id': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_flows_id_delete
        )

        def __admin_realms_realm_authentication_flows_id_get(
            self,
            id,
            realm,
            **kwargs
        ):
            """Get authentication flow for id  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_flows_id_get(id, realm, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): Flow id
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                authentication_flow_representation.AuthenticationFlowRepresentation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['id'] = \
                id
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_flows_id_get = Endpoint(
            settings={
                'response_type': (authentication_flow_representation.AuthenticationFlowRepresentation,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/flows/{id}',
                'operation_id': 'admin_realms_realm_authentication_flows_id_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'id',
                    'realm',
                ],
                'required': [
                    'id',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'realm': 'realm',
                },
                'location_map': {
                    'id': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_flows_id_get
        )

        def __admin_realms_realm_authentication_flows_id_put(
            self,
            id,
            realm,
            **kwargs
        ):
            """Update an authentication flow  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_flows_id_put(id, realm, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                realm (str):

            Keyword Args:
                authentication_flow_representation_authentication_flow_representation (authentication_flow_representation.AuthenticationFlowRepresentation): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['id'] = \
                id
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_flows_id_put = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/flows/{id}',
                'operation_id': 'admin_realms_realm_authentication_flows_id_put',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'id',
                    'realm',
                    'authentication_flow_representation_authentication_flow_representation',
                ],
                'required': [
                    'id',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'realm':
                        (str,),
                    'authentication_flow_representation_authentication_flow_representation':
                        (authentication_flow_representation.AuthenticationFlowRepresentation,),
                },
                'attribute_map': {
                    'id': 'id',
                    'realm': 'realm',
                },
                'location_map': {
                    'id': 'path',
                    'realm': 'path',
                    'authentication_flow_representation_authentication_flow_representation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_flows_id_put
        )

        def __admin_realms_realm_authentication_flows_post(
            self,
            realm,
            **kwargs
        ):
            """Create a new authentication flow  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_flows_post(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                authentication_flow_representation_authentication_flow_representation (authentication_flow_representation.AuthenticationFlowRepresentation): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_flows_post = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/flows',
                'operation_id': 'admin_realms_realm_authentication_flows_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'authentication_flow_representation_authentication_flow_representation',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'authentication_flow_representation_authentication_flow_representation':
                        (authentication_flow_representation.AuthenticationFlowRepresentation,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                    'authentication_flow_representation_authentication_flow_representation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_flows_post
        )

        def __admin_realms_realm_authentication_form_action_providers_get(
            self,
            realm,
            **kwargs
        ):
            """Get form action providers Returns a stream of form action providers.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_form_action_providers_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [{str: (str,)}]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_form_action_providers_get = Endpoint(
            settings={
                'response_type': ([{str: (str,)}],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/form-action-providers',
                'operation_id': 'admin_realms_realm_authentication_form_action_providers_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_form_action_providers_get
        )

        def __admin_realms_realm_authentication_form_providers_get(
            self,
            realm,
            **kwargs
        ):
            """Get form providers Returns a stream of form providers.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_form_providers_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [{str: (str,)}]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_form_providers_get = Endpoint(
            settings={
                'response_type': ([{str: (str,)}],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/form-providers',
                'operation_id': 'admin_realms_realm_authentication_form_providers_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_form_providers_get
        )

        def __admin_realms_realm_authentication_per_client_config_description_get(
            self,
            realm,
            **kwargs
        ):
            """Get configuration descriptions for all clients  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_per_client_config_description_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                {str: ([config_property_representation.ConfigPropertyRepresentation],)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_per_client_config_description_get = Endpoint(
            settings={
                'response_type': ({str: ([config_property_representation.ConfigPropertyRepresentation],)},),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/per-client-config-description',
                'operation_id': 'admin_realms_realm_authentication_per_client_config_description_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_per_client_config_description_get
        )

        def __admin_realms_realm_authentication_register_required_action_post(
            self,
            realm,
            **kwargs
        ):
            """Register a new required actions  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_register_required_action_post(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                request_body ({str: (str,)}): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_register_required_action_post = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/register-required-action',
                'operation_id': 'admin_realms_realm_authentication_register_required_action_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                    'request_body',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                    'request_body':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_register_required_action_post
        )

        def __admin_realms_realm_authentication_required_actions_alias_config_delete(
            self,
            alias,
            realm,
            **kwargs
        ):
            """Delete RequiredAction configuration  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_required_actions_alias_config_delete(alias, realm, async_req=True)
            >>> result = thread.get()

            Args:
                alias (str): Alias of required action
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['alias'] = \
                alias
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_required_actions_alias_config_delete = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/required-actions/{alias}/config',
                'operation_id': 'admin_realms_realm_authentication_required_actions_alias_config_delete',
                'http_method': 'DELETE',
                'servers': [],
            },
            params_map={
                'all': [
                    'alias',
                    'realm',
                ],
                'required': [
                    'alias',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'alias':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'alias': 'alias',
                    'realm': 'realm',
                },
                'location_map': {
                    'alias': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_required_actions_alias_config_delete
        )

        def __admin_realms_realm_authentication_required_actions_alias_config_description_get(
            self,
            alias,
            realm,
            **kwargs
        ):
            """Get RequiredAction provider configuration description  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_required_actions_alias_config_description_get(alias, realm, async_req=True)
            >>> result = thread.get()

            Args:
                alias (str): Alias of required action
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                required_action_config_info_representation.RequiredActionConfigInfoRepresentation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['alias'] = \
                alias
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_required_actions_alias_config_description_get = Endpoint(
            settings={
                'response_type': (required_action_config_info_representation.RequiredActionConfigInfoRepresentation,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/required-actions/{alias}/config-description',
                'operation_id': 'admin_realms_realm_authentication_required_actions_alias_config_description_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'alias',
                    'realm',
                ],
                'required': [
                    'alias',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'alias':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'alias': 'alias',
                    'realm': 'realm',
                },
                'location_map': {
                    'alias': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_required_actions_alias_config_description_get
        )

        def __admin_realms_realm_authentication_required_actions_alias_config_get(
            self,
            alias,
            realm,
            **kwargs
        ):
            """Get RequiredAction configuration  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_required_actions_alias_config_get(alias, realm, async_req=True)
            >>> result = thread.get()

            Args:
                alias (str): Alias of required action
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                required_action_config_representation.RequiredActionConfigRepresentation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['alias'] = \
                alias
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_required_actions_alias_config_get = Endpoint(
            settings={
                'response_type': (required_action_config_representation.RequiredActionConfigRepresentation,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/required-actions/{alias}/config',
                'operation_id': 'admin_realms_realm_authentication_required_actions_alias_config_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'alias',
                    'realm',
                ],
                'required': [
                    'alias',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'alias':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'alias': 'alias',
                    'realm': 'realm',
                },
                'location_map': {
                    'alias': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_required_actions_alias_config_get
        )

        def __admin_realms_realm_authentication_required_actions_alias_config_put(
            self,
            alias,
            realm,
            **kwargs
        ):
            """Update RequiredAction configuration  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_required_actions_alias_config_put(alias, realm, async_req=True)
            >>> result = thread.get()

            Args:
                alias (str): Alias of required action
                realm (str):

            Keyword Args:
                required_action_config_representation_required_action_config_representation (required_action_config_representation.RequiredActionConfigRepresentation): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['alias'] = \
                alias
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_required_actions_alias_config_put = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/required-actions/{alias}/config',
                'operation_id': 'admin_realms_realm_authentication_required_actions_alias_config_put',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'alias',
                    'realm',
                    'required_action_config_representation_required_action_config_representation',
                ],
                'required': [
                    'alias',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'alias':
                        (str,),
                    'realm':
                        (str,),
                    'required_action_config_representation_required_action_config_representation':
                        (required_action_config_representation.RequiredActionConfigRepresentation,),
                },
                'attribute_map': {
                    'alias': 'alias',
                    'realm': 'realm',
                },
                'location_map': {
                    'alias': 'path',
                    'realm': 'path',
                    'required_action_config_representation_required_action_config_representation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_required_actions_alias_config_put
        )

        def __admin_realms_realm_authentication_required_actions_alias_delete(
            self,
            alias,
            realm,
            **kwargs
        ):
            """Delete required action  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_required_actions_alias_delete(alias, realm, async_req=True)
            >>> result = thread.get()

            Args:
                alias (str): Alias of required action
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['alias'] = \
                alias
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_required_actions_alias_delete = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/required-actions/{alias}',
                'operation_id': 'admin_realms_realm_authentication_required_actions_alias_delete',
                'http_method': 'DELETE',
                'servers': [],
            },
            params_map={
                'all': [
                    'alias',
                    'realm',
                ],
                'required': [
                    'alias',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'alias':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'alias': 'alias',
                    'realm': 'realm',
                },
                'location_map': {
                    'alias': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_required_actions_alias_delete
        )

        def __admin_realms_realm_authentication_required_actions_alias_get(
            self,
            alias,
            realm,
            **kwargs
        ):
            """Get required action for alias  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_required_actions_alias_get(alias, realm, async_req=True)
            >>> result = thread.get()

            Args:
                alias (str): Alias of required action
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                required_action_provider_representation.RequiredActionProviderRepresentation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['alias'] = \
                alias
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_required_actions_alias_get = Endpoint(
            settings={
                'response_type': (required_action_provider_representation.RequiredActionProviderRepresentation,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/required-actions/{alias}',
                'operation_id': 'admin_realms_realm_authentication_required_actions_alias_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'alias',
                    'realm',
                ],
                'required': [
                    'alias',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'alias':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'alias': 'alias',
                    'realm': 'realm',
                },
                'location_map': {
                    'alias': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_required_actions_alias_get
        )

        def __admin_realms_realm_authentication_required_actions_alias_lower_priority_post(
            self,
            alias,
            realm,
            **kwargs
        ):
            """Lower required action's priority  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_required_actions_alias_lower_priority_post(alias, realm, async_req=True)
            >>> result = thread.get()

            Args:
                alias (str): Alias of required action
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['alias'] = \
                alias
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_required_actions_alias_lower_priority_post = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/required-actions/{alias}/lower-priority',
                'operation_id': 'admin_realms_realm_authentication_required_actions_alias_lower_priority_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'alias',
                    'realm',
                ],
                'required': [
                    'alias',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'alias':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'alias': 'alias',
                    'realm': 'realm',
                },
                'location_map': {
                    'alias': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_required_actions_alias_lower_priority_post
        )

        def __admin_realms_realm_authentication_required_actions_alias_put(
            self,
            alias,
            realm,
            **kwargs
        ):
            """Update required action  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_required_actions_alias_put(alias, realm, async_req=True)
            >>> result = thread.get()

            Args:
                alias (str): Alias of required action
                realm (str):

            Keyword Args:
                required_action_provider_representation_required_action_provider_representation (required_action_provider_representation.RequiredActionProviderRepresentation): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['alias'] = \
                alias
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_required_actions_alias_put = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/required-actions/{alias}',
                'operation_id': 'admin_realms_realm_authentication_required_actions_alias_put',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'alias',
                    'realm',
                    'required_action_provider_representation_required_action_provider_representation',
                ],
                'required': [
                    'alias',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'alias':
                        (str,),
                    'realm':
                        (str,),
                    'required_action_provider_representation_required_action_provider_representation':
                        (required_action_provider_representation.RequiredActionProviderRepresentation,),
                },
                'attribute_map': {
                    'alias': 'alias',
                    'realm': 'realm',
                },
                'location_map': {
                    'alias': 'path',
                    'realm': 'path',
                    'required_action_provider_representation_required_action_provider_representation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_required_actions_alias_put
        )

        def __admin_realms_realm_authentication_required_actions_alias_raise_priority_post(
            self,
            alias,
            realm,
            **kwargs
        ):
            """Raise required action's priority  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_required_actions_alias_raise_priority_post(alias, realm, async_req=True)
            >>> result = thread.get()

            Args:
                alias (str): Alias of required action
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['alias'] = \
                alias
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_required_actions_alias_raise_priority_post = Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str,),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/required-actions/{alias}/raise-priority',
                'operation_id': 'admin_realms_realm_authentication_required_actions_alias_raise_priority_post',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'alias',
                    'realm',
                ],
                'required': [
                    'alias',
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'alias':
                        (str,),
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'alias': 'alias',
                    'realm': 'realm',
                },
                'location_map': {
                    'alias': 'path',
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_required_actions_alias_raise_priority_post
        )

        def __admin_realms_realm_authentication_required_actions_get(
            self,
            realm,
            **kwargs
        ):
            """Get required actions Returns a stream of required actions.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_required_actions_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [required_action_provider_representation.RequiredActionProviderRepresentation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_required_actions_get = Endpoint(
            settings={
                'response_type': ([required_action_provider_representation.RequiredActionProviderRepresentation],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/required-actions',
                'operation_id': 'admin_realms_realm_authentication_required_actions_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_required_actions_get
        )

        def __admin_realms_realm_authentication_unregistered_required_actions_get(
            self,
            realm,
            **kwargs
        ):
            """Get unregistered required actions Returns a stream of unregistered required actions.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.admin_realms_realm_authentication_unregistered_required_actions_get(realm, async_req=True)
            >>> result = thread.get()

            Args:
                realm (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                [{str: (str,)}]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['realm'] = \
                realm
            return self.call_with_http_info(**kwargs)

        self.admin_realms_realm_authentication_unregistered_required_actions_get = Endpoint(
            settings={
                'response_type': ([{str: (str,)}],),
                'auth': [],
                'endpoint_path': '/admin/realms/{realm}/authentication/unregistered-required-actions',
                'operation_id': 'admin_realms_realm_authentication_unregistered_required_actions_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'realm',
                ],
                'required': [
                    'realm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'realm':
                        (str,),
                },
                'attribute_map': {
                    'realm': 'realm',
                },
                'location_map': {
                    'realm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_realms_realm_authentication_unregistered_required_actions_get
        )


class Endpoint(object):
    def __init__(self, settings=None, params_map=None, root_map=None,
                 headers_map=None, api_client=None, callable=None):
        """Creates an endpoint

        Args:
            settings (dict): see below key value pairs
                'response_type' (tuple/None): response type
                'auth' (list): a list of auth type keys
                'endpoint_path' (str): the endpoint path
                'operation_id' (str): endpoint string identifier
                'http_method' (str): POST/PUT/PATCH/GET etc
                'servers' (list): list of str servers that this endpoint is at
            params_map (dict): see below key value pairs
                'all' (list): list of str endpoint parameter names
                'required' (list): list of required parameter names
                'nullable' (list): list of nullable parameter names
                'enum' (list): list of parameters with enum values
                'validation' (list): list of parameters with validations
            root_map
                'validations' (dict): the dict mapping endpoint parameter tuple
                    paths to their validation dictionaries
                'allowed_values' (dict): the dict mapping endpoint parameter
                    tuple paths to their allowed_values (enum) dictionaries
                'openapi_types' (dict): param_name to openapi type
                'attribute_map' (dict): param_name to camelCase name
                'location_map' (dict): param_name to  'body', 'file', 'form',
                    'header', 'path', 'query'
                collection_format_map (dict): param_name to `csv` etc.
            headers_map (dict): see below key value pairs
                'accept' (list): list of Accept header strings
                'content_type' (list): list of Content-Type header strings
            api_client (ApiClient) api client instance
            callable (function): the function which is invoked when the
                Endpoint is called
        """
        self.settings = settings
        self.params_map = params_map
        self.params_map['all'].extend([
            'async_req',
            '_host_index',
            '_preload_content',
            '_request_timeout',
            '_return_http_data_only',
            '_check_input_type',
            '_check_return_type'
        ])
        self.params_map['nullable'].extend(['_request_timeout'])
        self.validations = root_map['validations']
        self.allowed_values = root_map['allowed_values']
        self.openapi_types = root_map['openapi_types']
        extra_types = {
            'async_req': (bool,),
            '_host_index': (int,),
            '_preload_content': (bool,),
            '_request_timeout': (none_type, int, (int,), [int]),
            '_return_http_data_only': (bool,),
            '_check_input_type': (bool,),
            '_check_return_type': (bool,)
        }
        self.openapi_types.update(extra_types)
        self.attribute_map = root_map['attribute_map']
        self.location_map = root_map['location_map']
        self.collection_format_map = root_map['collection_format_map']
        self.headers_map = headers_map
        self.api_client = api_client
        self.callable = callable

    def __validate_inputs(self, kwargs):
        for param in self.params_map['enum']:
            if param in kwargs:
                check_allowed_values(
                    self.allowed_values,
                    (param,),
                    kwargs[param]
                )

        for param in self.params_map['validation']:
            if param in kwargs:
                check_validations(
                    self.validations,
                    (param,),
                    kwargs[param]
                )

        if kwargs['_check_input_type'] is False:
            return

        for key, value in six.iteritems(kwargs):
            fixed_val = validate_and_convert_types(
                value,
                self.openapi_types[key],
                [key],
                False,
                kwargs['_check_input_type'],
                configuration=self.api_client.configuration
            )
            kwargs[key] = fixed_val

    def __gather_params(self, kwargs):
        params = {
            'body': None,
            'collection_format': {},
            'file': {},
            'form': [],
            'header': {},
            'path': {},
            'query': []
        }

        for param_name, param_value in six.iteritems(kwargs):
            param_location = self.location_map.get(param_name)
            if param_location is None:
                continue
            if param_location:
                if param_location == 'body':
                    params['body'] = param_value
                    continue
                base_name = self.attribute_map[param_name]
                if (param_location == 'form' and
                        self.openapi_types[param_name] == (file_type,)):
                    params['file'][param_name] = [param_value]
                elif (param_location == 'form' and
                        self.openapi_types[param_name] == ([file_type],)):
                    # param_value is already a list
                    params['file'][param_name] = param_value
                elif param_location in {'form', 'query'}:
                    param_value_full = (base_name, param_value)
                    params[param_location].append(param_value_full)
                if param_location not in {'form', 'query'}:
                    params[param_location][base_name] = param_value
                collection_format = self.collection_format_map.get(param_name)
                if collection_format:
                    params['collection_format'][base_name] = collection_format

        return params

    def __call__(self, *args, **kwargs):
        """ This method is invoked when endpoints are called
        Example:
        pet_api = PetApi()
        pet_api.add_pet  # this is an instance of the class Endpoint
        pet_api.add_pet()  # this invokes pet_api.add_pet.__call__()
        which then invokes the callable functions stored in that endpoint at
        pet_api.add_pet.callable or self.callable in this class
        """
        return self.callable(self, *args, **kwargs)

    def call_with_http_info(self, **kwargs):

        try:
            _host = self.settings['servers'][kwargs['_host_index']]
        except IndexError:
            if self.settings['servers']:
                raise ApiValueError(
                    "Invalid host index. Must be 0 <= index < %s" %
                    len(self.settings['servers'])
                )
            _host = None

        for key, value in six.iteritems(kwargs):
            if key not in self.params_map['all']:
                raise ApiTypeError(
                    "Got an unexpected parameter '%s'"
                    " to method `%s`" %
                    (key, self.settings['operation_id'])
                )
            # only throw this nullable ApiValueError if _check_input_type
            # is False, if _check_input_type==True we catch this case
            # in self.__validate_inputs
            if (key not in self.params_map['nullable'] and value is None
                    and kwargs['_check_input_type'] is False):
                raise ApiValueError(
                    "Value may not be None for non-nullable parameter `%s`"
                    " when calling `%s`" %
                    (key, self.settings['operation_id'])
                )

        for key in self.params_map['required']:
            if key not in kwargs.keys():
                raise ApiValueError(
                    "Missing the required parameter `%s` when calling "
                    "`%s`" % (key, self.settings['operation_id'])
                )

        self.__validate_inputs(kwargs)

        params = self.__gather_params(kwargs)

        accept_headers_list = self.headers_map['accept']
        if accept_headers_list:
            params['header']['Accept'] = self.api_client.select_header_accept(
                accept_headers_list)

        content_type_headers_list = self.headers_map['content_type']
        if content_type_headers_list:
            header_list = self.api_client.select_header_content_type(
                content_type_headers_list)
            params['header']['Content-Type'] = header_list

        return self.api_client.call_api(
            self.settings['endpoint_path'], self.settings['http_method'],
            params['path'],
            params['query'],
            params['header'],
            body=params['body'],
            post_params=params['form'],
            files=params['file'],
            response_type=self.settings['response_type'],
            auth_settings=self.settings['auth'],
            async_req=kwargs['async_req'],
            _check_type=kwargs['_check_return_type'],
            _return_http_data_only=kwargs['_return_http_data_only'],
            _preload_content=kwargs['_preload_content'],
            _request_timeout=kwargs['_request_timeout'],
            _host=_host,
            collection_formats=params['collection_format'])
